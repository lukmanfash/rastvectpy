{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to rastvectpy","text":"<p>A python package for raster and vector data visualization and analysis.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://lukmanfash.github.io/rastvectpy</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/lukmanfash/rastvectpy/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>rastvectpy could always use more documentation, whether as part of the official rastvectpy docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/lukmanfash/rastvectpy/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up rastvectpy for local development.</p> <ol> <li> <p>Fork the rastvectpy repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/rastvectpy.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv rastvectpy\n$ cd rastvectpy/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 rastvectpy tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/lukmanfash/rastvectpy/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumpyt/","title":"foliumpyt module","text":"<p>Main module: visualize vector data with folium</p>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map","title":"<code> Map            (Map)         </code>","text":"<p>The Map class inherits folium.Map</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>folium  module for visualizing vector data</p> required Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>class Map(folium.Map):\n\"\"\"The Map class inherits folium.Map\n\n    Args:\n        folium (_type_): _folium  module for visualizing vector data_\n    \"\"\"\n    # def __init__(self, location=None, width='100%', height='100%', **kwargs):\n    #     super().__init__(location=location, width=width, height=height, **kwargs)\n    def __init__(self, center=[20, 0], zoom = 2, width='100%', height='100%', **kwargs)-&gt; None:\n\"\"\"Initialize a folium map object\n\n        Args:\n            center (list, optional): the map location or center. Defaults to [20, 0].\n            zoom (int, optional): the map zoom level. Defaults to 2.\n            width (str, optional): the map width. Defaults to '100%'.\n            height (str, optional): the map height. Defaults to '100%'.\n        \"\"\"        \n        super().__init__(location=center, zoom_start=zoom, width=width, height=height, **kwargs)\n\n\n    def add_tile_layer(self, url, name, attribution ='', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): The tile layer url.\n            name (str): The tile layer name.\n            attribution (str, optional): The tile layer attribution. Defaults to ''.\n            kwargs: Additional keyword arguments to pass to the tile layer constructor.\n        \"\"\"        \n        tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n        self.add_child(tile_layer)\n\n\n    # def add_basemap(self, basemap=\"HYBRID\", show=True, **kwargs):\n    #     \"\"\"Add a basemap to the map.\n\n    #     Args:\n    #         basemap (str, optional): Name of the basemap. Defaults to \"HYBRID\".\n    #         show (bool, optional): Whether to show the basemap in the layer control. Defaults to True.\n    #         kwargs: Additional keyword arguments to pass to the basemap constructor.\n    #     \"\"\"        \n    #     basemap = basemap.upper()\n    #     if basemap == \"HYBRID\":\n    #         self.add_tile_layer(name=\"Google Satellite\", tiles=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"ROADMAP\":\n    #         self.add_tile_layer(name=\"Google Maps\", tiles=\"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"TERRAIN\":\n    #         self.add_tile_layer(name=\"Google Terrain\", tiles=\"https://mt1.google.com/vt/lyrs=p&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"SATELLITE\":\n    #         self.add_tile_layer(name=\"Google Satellite\", tiles=\"https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"SATELLITE_ONLY\":\n    #         self.add_tile_layer(name=\"Google Satellite\", tiles=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"ROADMAP_ONLY\":\n    #         self.add_tile_layer(name=\"Google Maps\", tiles=\"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     else:\n    #         raise ValueError(\"Unknown basemap: {}\".format(basemap))\n\n\n    def add_basemap_xyz(self, url, name, attribution='', show=True, **kwargs):\n\"\"\"Add a basemap to the map.\n\n        Args:\n            url (str): The tile layer url.\n            name (str): The tile layer name.\n            attribution (str, optional): The tile layer attribution. Defaults to ''.\n            show (bool, optional): Whether to show the basemap in the layer control. Defaults to True.\n            kwargs: Additional keyword arguments to pass to the basemap constructor.\n        \"\"\"        \n        tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, show=show, **kwargs)\n        self.add_child(tile_layer)\n\n    def add_geojson(self, data, name=\"GeoJSON\", show=True, **kwargs):\n\"\"\"Add a GeoJSON layer to the map.\n\n        Args:\n            data (str, dict): The GeoJSON data or URL to the GeoJSON data.\n            name (str, optional): The layer name. Defaults to \"Untitled\".\n            show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n            kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n        \"\"\"        \n        geo_json = folium.GeoJson(data=data, name=name, show=show, **kwargs)\n        self.add_child(geo_json)\n\n\n    def add_shp(self, in_shp, name=\"Shapefile\", show=True, **kwargs):\n\"\"\"Add a shapefile to the map.\n\n        Args:\n            in_shp (str): The input shapefile path.\n            name (str, optional): The layer name. Defaults to \"Untitled\".\n            show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n            kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n        \"\"\"        \n        geo_json = folium.GeoJson(data=in_shp, name=name, show=show, **kwargs)\n        self.add_child(geo_json)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, width='100%', height='100%', **kwargs)</code>  <code>special</code>","text":"<p>Initialize a folium map object</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>the map location or center. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>the map zoom level. Defaults to 2.</p> <code>2</code> <code>width</code> <code>str</code> <p>the map width. Defaults to '100%'.</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>the map height. Defaults to '100%'.</p> <code>'100%'</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def __init__(self, center=[20, 0], zoom = 2, width='100%', height='100%', **kwargs)-&gt; None:\n\"\"\"Initialize a folium map object\n\n    Args:\n        center (list, optional): the map location or center. Defaults to [20, 0].\n        zoom (int, optional): the map zoom level. Defaults to 2.\n        width (str, optional): the map width. Defaults to '100%'.\n        height (str, optional): the map height. Defaults to '100%'.\n    \"\"\"        \n    super().__init__(location=center, zoom_start=zoom, width=width, height=height, **kwargs)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_basemap_xyz","title":"<code>add_basemap_xyz(self, url, name, attribution='', show=True, **kwargs)</code>","text":"<p>Add a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The tile layer url.</p> required <code>name</code> <code>str</code> <p>The tile layer name.</p> required <code>attribution</code> <code>str</code> <p>The tile layer attribution. Defaults to ''.</p> <code>''</code> <code>show</code> <code>bool</code> <p>Whether to show the basemap in the layer control. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the basemap constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_basemap_xyz(self, url, name, attribution='', show=True, **kwargs):\n\"\"\"Add a basemap to the map.\n\n    Args:\n        url (str): The tile layer url.\n        name (str): The tile layer name.\n        attribution (str, optional): The tile layer attribution. Defaults to ''.\n        show (bool, optional): Whether to show the basemap in the layer control. Defaults to True.\n        kwargs: Additional keyword arguments to pass to the basemap constructor.\n    \"\"\"        \n    tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, show=show, **kwargs)\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', show=True, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, dict</code> <p>The GeoJSON data or URL to the GeoJSON data.</p> required <code>name</code> <code>str</code> <p>The layer name. Defaults to \"Untitled\".</p> <code>'GeoJSON'</code> <code>show</code> <code>bool</code> <p>Whether to show the layer in the layer control. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the GeoJSON constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_geojson(self, data, name=\"GeoJSON\", show=True, **kwargs):\n\"\"\"Add a GeoJSON layer to the map.\n\n    Args:\n        data (str, dict): The GeoJSON data or URL to the GeoJSON data.\n        name (str, optional): The layer name. Defaults to \"Untitled\".\n        show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n        kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n    \"\"\"        \n    geo_json = folium.GeoJson(data=data, name=name, show=show, **kwargs)\n    self.add_child(geo_json)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_shp","title":"<code>add_shp(self, in_shp, name='Shapefile', show=True, **kwargs)</code>","text":"<p>Add a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_shp</code> <code>str</code> <p>The input shapefile path.</p> required <code>name</code> <code>str</code> <p>The layer name. Defaults to \"Untitled\".</p> <code>'Shapefile'</code> <code>show</code> <code>bool</code> <p>Whether to show the layer in the layer control. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the GeoJSON constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_shp(self, in_shp, name=\"Shapefile\", show=True, **kwargs):\n\"\"\"Add a shapefile to the map.\n\n    Args:\n        in_shp (str): The input shapefile path.\n        name (str, optional): The layer name. Defaults to \"Untitled\".\n        show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n        kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n    \"\"\"        \n    geo_json = folium.GeoJson(data=in_shp, name=name, show=show, **kwargs)\n    self.add_child(geo_json)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The tile layer url.</p> required <code>name</code> <code>str</code> <p>The tile layer name.</p> required <code>attribution</code> <code>str</code> <p>The tile layer attribution. Defaults to ''.</p> <code>''</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the tile layer constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_tile_layer(self, url, name, attribution ='', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): The tile layer url.\n        name (str): The tile layer name.\n        attribution (str, optional): The tile layer attribution. Defaults to ''.\n        kwargs: Additional keyword arguments to pass to the tile layer constructor.\n    \"\"\"        \n    tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install rastvectpy, run this command in your terminal:</p> <pre><code>pip install rastvectpy\n</code></pre> <p>This is the preferred method to install rastvectpy, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for rastvectpy can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/lukmanfash/rastvectpy\n</code></pre>"},{"location":"rastvectpy/","title":"rastvectpy module","text":"<p>Main module.</p>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map","title":"<code> Map            (Map)         </code>","text":"<p>The Map class inherits ipyleaflet.Map</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>_type_</code> <p>ipyleaflet module for visualizing vector data</p> required Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>class Map(ipyleaflet.Map):\n\"\"\"The Map class inherits ipyleaflet.Map\n\n    Args:\n        ipyleaflet (_type_): ipyleaflet module for visualizing vector data\n    \"\"\"    \n\n    def __init__(self, center, zoom, **kwargs)-&gt; None:\n\"\"\" Initialize an ipyleaflet map object.\n\n        Args:\n            center (_type_): center of the map\n            zoom (_type_): zoom level of the map\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n        # print(kwargs)\n        super().__init__(center = center, zoom = zoom, **kwargs)\n\n        if \"layer_control\" not in kwargs:\n            kwargs[\"layer_control\"] = True\n\n        if kwargs[\"layer_control\"]:\n            self.add_layer_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Add a search control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.SearchControl constructor.\n        \"\"\"  \n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"      \n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(ipyleaflet.SearchControl(**kwargs))\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Add a draw control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.DrawControl constructor.\n        \"\"\"  \n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layer_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a layer control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.LayersControl constructor.\n        \"\"\"  \n        layer_control = ipyleaflet.LayersControl(position=position, **kwargs)\n        self.add_control(layer_control)\n\n    def add_fullscreen_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a fullscreen control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.FullScreenControl constructor.\n        \"\"\"  \n        fullscreen_control = ipyleaflet.FullScreenControl(position=position, **kwargs)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): The url of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str): The attribution of the tile layer.\n            kwargs: Keyword arguments to pass to the ipyleaflet.TileLayer constructor.\n        \"\"\"  \n        tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n        self.add_layer(tile_layer)\n\n\n    def add_basemap(self, basemap, **kwargs):\n        import xyzservices.providers as xyz\n\"\"\"Add a basemap to the map.\n\n        Args:\n            basemap (str): The name of the basemap.\n            kwargs: Keyword arguments to pass to the ipyleaflet.basemap constructor.\n        \"\"\"  \n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'            \n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"terrain\":\n            url = 'http://mt0.google.com/vt/lyrs=p&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"hybrid\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attriution = attribution)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' is not supported. Please choose one of the following: roadmap, satellite, terrain, hybrid or provide a valid url.\")\n\n\n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Add a geojson to the map.\n\n        Args:\n            data (dict): The geojson data.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoJSON constructor.\n        \"\"\"  \n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Add a shapefile to the map.\n\n        Args:\n            data (str): The url of the shapefile.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n        \"\"\"  \n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        # geojson = gdf.to_json() : this convert to a string but needs to be converted to a dictionary\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def add_shp(self, url, name='Shapefile', **kwargs):\n\"\"\"Add a shapefile to the map.\n\n        Args:\n            data (str): The url of the shapefile.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n        \"\"\"  \n        import geopandas as gpd\n        gdf = gpd.read_file(url)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def read_geojson_from_url(url):\n        import requests\n        import geopandas as gpd\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            gdf = gpd.read_file(response.content)\n            return gdf\n        except (ValueError, requests.exceptions.RequestException) as e:\n            print(\"Error:\", e)\n        return None\n\n\n    def add_vector(self, vector_data, name='Vector', **kwargs):\n\"\"\"Add a vector data to the map.\n\n        Args:\n            vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n        \"\"\"  \n        import geopandas as gpd\n        gdf = gpd.GeoDataFrame(geometry=gpd.points_from_xy(vector_data[0], vector_data[1]))\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def visualize_raster(raster_data):    \n\"\"\"\n        Visualize a raster data using matplotlib.\n\n        Parameters:\n        raster_data (numpy.ndarray): A 2D array of raster data.\n\n        Returns:\n        None\n        \"\"\"\n        # Create a figure and axis object\n        fig, ax = plt.subplots()\n        # Set the aspect ratio\n        ax.set_aspect('equal')\n        # Show the raster data as an image\n        ax.imshow(raster_data, cmap='gray')\n        # Set the x and y axis labels\n        ax.set_xlabel('X')\n        ax.set_ylabel('Y')\n        # Show the plot\n        plt.show()\n\n\n    def visualize_vector(vector_data):\n\"\"\"\n        Visualize a vector data using matplotlib.\n\n        Parameters:\n        vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n\n        Returns:\n        None\n        \"\"\"\n        # Create a figure and axis object\n        fig, ax = plt.subplots()\n        # Plot the vector data\n        ax.quiver(vector_data[0], vector_data[1], color='blue', scale=1, units='xy', width=0.005, headwidth=5, headlength=7)\n        # Set the x and y axis limits\n        ax.set_xlim([min(vector_data[0])-1, max(vector_data[0])+1])\n        ax.set_ylim([min(vector_data[1])-1, max(vector_data[1])+1])\n        # Set the x and y axis labels\n        ax.set_xlabel('X')\n        ax.set_ylabel('Y')\n        # Show plot\n        plt.show()\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.__init__","title":"<code>__init__(self, center, zoom, **kwargs)</code>  <code>special</code>","text":"<p>Initialize an ipyleaflet map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>_type_</code> <p>center of the map</p> required <code>zoom</code> <code>_type_</code> <p>zoom level of the map</p> required Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def __init__(self, center, zoom, **kwargs)-&gt; None:\n\"\"\" Initialize an ipyleaflet map object.\n\n    Args:\n        center (_type_): center of the map\n        zoom (_type_): zoom level of the map\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n    # print(kwargs)\n    super().__init__(center = center, zoom = zoom, **kwargs)\n\n    if \"layer_control\" not in kwargs:\n        kwargs[\"layer_control\"] = True\n\n    if kwargs[\"layer_control\"]:\n        self.add_layer_control()\n\n    if \"fullscreen_control\" not in kwargs:\n        kwargs[\"fullscreen_control\"] = True\n\n    if kwargs[\"fullscreen_control\"]:\n        self.add_fullscreen_control()\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Add a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.DrawControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Add a draw control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.DrawControl constructor.\n    \"\"\"  \n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topright', **kwargs)</code>","text":"<p>Add a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.FullScreenControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_fullscreen_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a fullscreen control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.FullScreenControl constructor.\n    \"\"\"  \n    fullscreen_control = ipyleaflet.FullScreenControl(position=position, **kwargs)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Add a geojson to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The geojson data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.GeoJSON constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Add a geojson to the map.\n\n    Args:\n        data (dict): The geojson data.\n        kwargs: Keyword arguments to pass to the ipyleaflet.GeoJSON constructor.\n    \"\"\"  \n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright', **kwargs)</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.LayersControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_layer_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a layer control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.LayersControl constructor.\n    \"\"\"  \n    layer_control = ipyleaflet.LayersControl(position=position, **kwargs)\n    self.add_control(layer_control)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Add a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.SearchControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Add a search control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.SearchControl constructor.\n    \"\"\"  \n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"      \n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(ipyleaflet.SearchControl(**kwargs))\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_shp","title":"<code>add_shp(self, url, name='Shapefile', **kwargs)</code>","text":"<p>Add a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The url of the shapefile.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.GeoData constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_shp(self, url, name='Shapefile', **kwargs):\n\"\"\"Add a shapefile to the map.\n\n    Args:\n        data (str): The url of the shapefile.\n        kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n    \"\"\"  \n    import geopandas as gpd\n    gdf = gpd.read_file(url)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer.</p> <code>''</code> <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.TileLayer constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): The url of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str): The attribution of the tile layer.\n        kwargs: Keyword arguments to pass to the ipyleaflet.TileLayer constructor.\n    \"\"\"  \n    tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_vector","title":"<code>add_vector(self, vector_data, name='Vector', **kwargs)</code>","text":"<p>Add a vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>vector_data</code> <code>tuple</code> <p>A tuple of two 1D arrays representing the x and y coordinates of the vector data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.GeoData constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_vector(self, vector_data, name='Vector', **kwargs):\n\"\"\"Add a vector data to the map.\n\n    Args:\n        vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n        kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n    \"\"\"  \n    import geopandas as gpd\n    gdf = gpd.GeoDataFrame(geometry=gpd.points_from_xy(vector_data[0], vector_data[1]))\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.visualize_raster","title":"<code>visualize_raster(raster_data)</code>","text":"<p>Visualize a raster data using matplotlib.</p> <p>raster_data (numpy.ndarray): A 2D array of raster data.</p> <p>None</p> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def visualize_raster(raster_data):    \n\"\"\"\n    Visualize a raster data using matplotlib.\n\n    Parameters:\n    raster_data (numpy.ndarray): A 2D array of raster data.\n\n    Returns:\n    None\n    \"\"\"\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n    # Set the aspect ratio\n    ax.set_aspect('equal')\n    # Show the raster data as an image\n    ax.imshow(raster_data, cmap='gray')\n    # Set the x and y axis labels\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    # Show the plot\n    plt.show()\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.visualize_vector","title":"<code>visualize_vector(vector_data)</code>","text":"<p>Visualize a vector data using matplotlib.</p> <p>vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.</p> <p>None</p> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def visualize_vector(vector_data):\n\"\"\"\n    Visualize a vector data using matplotlib.\n\n    Parameters:\n    vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n\n    Returns:\n    None\n    \"\"\"\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n    # Plot the vector data\n    ax.quiver(vector_data[0], vector_data[1], color='blue', scale=1, units='xy', width=0.005, headwidth=5, headlength=7)\n    # Set the x and y axis limits\n    ax.set_xlim([min(vector_data[0])-1, max(vector_data[0])+1])\n    ax.set_ylim([min(vector_data[1])-1, max(vector_data[1])+1])\n    # Set the x and y axis labels\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    # Show plot\n    plt.show()\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use rastvectpy in a project:</p> <pre><code>import rastvectpy\n</code></pre>"},{"location":"examples/Introd/","title":"Introd","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment the code below in colab: \n# %pip install git+https://github.com/lukmanfash/rastvectpy.git\n</pre> # Uncomment the code below in colab:  # %pip install git+https://github.com/lukmanfash/rastvectpy.git In\u00a0[\u00a0]: Copied! <pre>##User adding basemap (hybrid, roadmap, satellite, terrain) url.\n\nimport rastvectpy\nimport ipyleaflet\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nurl = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\nlayer = ipyleaflet.TileLayer(url=url, name=\"Google Satellite\", attribution=\"Google\")\nm.add_layer(layer)\nm\n</pre> ##User adding basemap (hybrid, roadmap, satellite, terrain) url.  import rastvectpy import ipyleaflet m = rastvectpy.Map(center = [40, -100], zoom = 3) url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" layer = ipyleaflet.TileLayer(url=url, name=\"Google Satellite\", attribution=\"Google\") m.add_layer(layer) m In\u00a0[\u00a0]: Copied! <pre>m = rastvectpy.Map(center = [40, -100], zoom = 3, )\nm.add_search_control(position = 'topleft', zoom = 10)\nm.add_draw_control(position= \"topleft\")\nm.scroll_wheel_zoom=True\nm.add_layer_control()\n</pre> m = rastvectpy.Map(center = [40, -100], zoom = 3, ) m.add_search_control(position = 'topleft', zoom = 10) m.add_draw_control(position= \"topleft\") m.scroll_wheel_zoom=True m.add_layer_control() In\u00a0[\u00a0]: Copied! <pre>##User adding basemap name(string): hybrid, roadmap, satellite, terrain.\n\nimport rastvectpy\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nm.add_basemap(\"roadmap\")\nm\n</pre> ##User adding basemap name(string): hybrid, roadmap, satellite, terrain.  import rastvectpy m = rastvectpy.Map(center = [40, -100], zoom = 3) m.add_basemap(\"roadmap\") m In\u00a0[\u00a0]: Copied! <pre># using the xyz service package to generate basemap as a repo of several basemaps;\n# Note to check all the map categories in xyz services, syntax is:  xyz.keys()\n# For Esri basemaps, syntax is: xyz.Esri.keys()\n# For cartoDB basemaps, syntax is: xyz.CartoDB.keys()\n# to add any of those basemaps, syntax is: xyz.Esri.WorldImagery.build_url()\n# or xyz.CartoDB.DarkMatter.build_url()\n# or m.add_basemap(\"Esri.WorldImagery\")\n# or m.add_basemap(\"CartoDB.DarkMatter\")\n#to create a function to list all the basemaps\n\nimport xyzservices.providers as xyz\nimport rastvectpy\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nurl2= xyz.Esri.WorldImagery.build_url()\nm.add_tile_layer(url2, name=\"Esri World Imagery\")\nm\n</pre> # using the xyz service package to generate basemap as a repo of several basemaps; # Note to check all the map categories in xyz services, syntax is:  xyz.keys() # For Esri basemaps, syntax is: xyz.Esri.keys() # For cartoDB basemaps, syntax is: xyz.CartoDB.keys() # to add any of those basemaps, syntax is: xyz.Esri.WorldImagery.build_url() # or xyz.CartoDB.DarkMatter.build_url() # or m.add_basemap(\"Esri.WorldImagery\") # or m.add_basemap(\"CartoDB.DarkMatter\") #to create a function to list all the basemaps  import xyzservices.providers as xyz import rastvectpy m = rastvectpy.Map(center = [40, -100], zoom = 3) url2= xyz.Esri.WorldImagery.build_url() m.add_tile_layer(url2, name=\"Esri World Imagery\") m    In\u00a0[\u00a0]: Copied! <pre># Loading a geojson file\n#i) by adding a geojson file from a local directory/file path as geojson file or zip file\n#ii) by adding a geojson file from a url\n#iii) by providing a dictionary of geojson data\n\n# 1)\nimport rastvectpy\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nm.add_geojson('data/LoudonCntyTN.geojson', name = 'Loudon County_TN')\nm\n\n# or\nm.add_shp('data/countries.zip', name = 'countries')\n# #to add customization:\n# style={\n#     'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n# },\n# hover_style={\n#     'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5\n# },\n# style_callback=random_color\n# m.add_shp('data/countries.zip', name = 'countries', style=style)\n</pre> # Loading a geojson file #i) by adding a geojson file from a local directory/file path as geojson file or zip file #ii) by adding a geojson file from a url #iii) by providing a dictionary of geojson data  # 1) import rastvectpy m = rastvectpy.Map(center = [40, -100], zoom = 3) m.add_geojson('data/LoudonCntyTN.geojson', name = 'Loudon County_TN') m  # or m.add_shp('data/countries.zip', name = 'countries') # #to add customization: # style={ #     'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1 # }, # hover_style={ #     'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5 # }, # style_callback=random_color # m.add_shp('data/countries.zip', name = 'countries', style=style) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(center=(52.204793, 360.121558), zoom=9)\n\ndark_matter_layer = basemap_to_tiles(basemaps.CartoDB.DarkMatter)\nm.add_layer(dark_matter_layer)\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(center=(52.204793, 360.121558), zoom=9)  dark_matter_layer = basemap_to_tiles(basemaps.CartoDB.DarkMatter) m.add_layer(dark_matter_layer) m In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n# import rastvectpy\n</pre> import numpy as np import matplotlib.pyplot as plt # import rastvectpy In\u00a0[\u00a0]: Copied! <pre>m.add_search_control(position = 'topleft', zoom = 10, url = url)\nm.add_draw_control(position= \"topleft\")\nm.scroll_wheel_zoom=True\nm\n</pre> m.add_search_control(position = 'topleft', zoom = 10, url = url) m.add_draw_control(position= \"topleft\") m.scroll_wheel_zoom=True m  In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>raster_data = np.random.randint(0, 255, size=(100, 100))\nvector_data = (np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100))\n</pre> raster_data = np.random.randint(0, 255, size=(100, 100)) vector_data = (np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100)) In\u00a0[\u00a0]: Copied! <pre>rastvectpy.visualize_raster(raster_data)\n</pre> rastvectpy.visualize_raster(raster_data) In\u00a0[\u00a0]: Copied! <pre>rastvectpy.visualize_vector(vector_data)\n</pre> rastvectpy.visualize_vector(vector_data) In\u00a0[\u00a0]: Copied! <pre># visualize_raster(np.random.randint(0, 255, size=(100, 100)))\n# visualize_vector((np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100)))\n</pre> # visualize_raster(np.random.randint(0, 255, size=(100, 100))) # visualize_vector((np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100)))"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment the code below in colab: \n# %pip install git+https://github.com/lukmanfash/rastvectpy.git\n</pre> # Uncomment the code below in colab:  # %pip install git+https://github.com/lukmanfash/rastvectpy.git In\u00a0[1]: Copied! <pre>import rastvectpy.foliumpyt as rastvectpy\n</pre> import rastvectpy.foliumpyt as rastvectpy In\u00a0[2]: Copied! <pre>m = rastvectpy.Map(center=[45.5236, -122.6750], zoom = 4)\nurl = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\nm.add_tile_layer(url = url, name=\"Google Satellite\", attribution=\"Google\")\nm\n</pre> m = rastvectpy.Map(center=[45.5236, -122.6750], zoom = 4) url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' m.add_tile_layer(url = url, name=\"Google Satellite\", attribution=\"Google\") m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/folium/#adding-tile-layer","title":"Adding Tile layer\u00b6","text":""},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),     center=(52.204793, 360.121558),     zoom=4 )  m <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre>"},{"location":"examples/package_description/","title":"Package description","text":""},{"location":"examples/package_description/#this-is-a-python-package-for-visualizing-raster-and-vector-data","title":"This is a python package for visualizing raster and vector data\u00b6","text":""}]}