{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to rastvectpy","text":"<p>A python package for raster and vector data visualization and analysis.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://lukmanfash.github.io/rastvectpy</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/lukmanfash/rastvectpy/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>rastvectpy could always use more documentation, whether as part of the official rastvectpy docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/lukmanfash/rastvectpy/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up rastvectpy for local development.</p> <ol> <li> <p>Fork the rastvectpy repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/rastvectpy.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv rastvectpy\n$ cd rastvectpy/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 rastvectpy tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/lukmanfash/rastvectpy/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumpyt/","title":"foliumpyt module","text":"<p>Main module: visualize vector data with folium</p>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map","title":"<code> Map            (Map)         </code>","text":"<p>The Map class inherits folium.Map</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>folium  module for visualizing vector data</p> required Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>class Map(folium.Map):\n\"\"\"The Map class inherits folium.Map\n\n    Args:\n        folium (_type_): _folium  module for visualizing vector data_\n    \"\"\"\n    # def __init__(self, location=None, width='100%', height='100%', **kwargs):\n    #     super().__init__(location=location, width=width, height=height, **kwargs)\n    def __init__(self, center=[20, 0], zoom = 2, width='100%', height='100%', **kwargs)-&gt; None:\n\"\"\"Initialize a folium map object\n\n        Args:\n            center (list, optional): the map location or center. Defaults to [20, 0].\n            zoom (int, optional): the map zoom level. Defaults to 2.\n            width (str, optional): the map width. Defaults to '100%'.\n            height (str, optional): the map height. Defaults to '100%'.\n        \"\"\"        \n        super().__init__(location=center, zoom_start=zoom, width=width, height=height, **kwargs)\n\n\n    def add_tile_layer(self, url, name, attribution ='', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): The tile layer url.\n            name (str): The tile layer name.\n            attribution (str, optional): The tile layer attribution. Defaults to ''.\n            kwargs: Additional keyword arguments to pass to the tile layer constructor.\n        \"\"\"        \n        tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n        self.add_child(tile_layer)\n\n\n    # def add_basemap(self, basemap=\"HYBRID\", show=True, **kwargs):\n    #     \"\"\"Add a basemap to the map.\n\n    #     Args:\n    #         basemap (str, optional): Name of the basemap. Defaults to \"HYBRID\".\n    #         show (bool, optional): Whether to show the basemap in the layer control. Defaults to True.\n    #         kwargs: Additional keyword arguments to pass to the basemap constructor.\n    #     \"\"\"        \n    #     basemap = basemap.upper()\n    #     if basemap == \"HYBRID\":\n    #         self.add_tile_layer(name=\"Google Satellite\", tiles=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"ROADMAP\":\n    #         self.add_tile_layer(name=\"Google Maps\", tiles=\"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"TERRAIN\":\n    #         self.add_tile_layer(name=\"Google Terrain\", tiles=\"https://mt1.google.com/vt/lyrs=p&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"SATELLITE\":\n    #         self.add_tile_layer(name=\"Google Satellite\", tiles=\"https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"SATELLITE_ONLY\":\n    #         self.add_tile_layer(name=\"Google Satellite\", tiles=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     elif basemap == \"ROADMAP_ONLY\":\n    #         self.add_tile_layer(name=\"Google Maps\", tiles=\"https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\", attr=\"Google\", show=show, **kwargs)\n    #     else:\n    #         raise ValueError(\"Unknown basemap: {}\".format(basemap))\n\n\n    def add_basemap_xyz(self, url, name, attribution='', show=True, **kwargs):\n\"\"\"Add a basemap to the map.\n\n        Args:\n            url (str): The tile layer url.\n            name (str): The tile layer name.\n            attribution (str, optional): The tile layer attribution. Defaults to ''.\n            show (bool, optional): Whether to show the basemap in the layer control. Defaults to True.\n            kwargs: Additional keyword arguments to pass to the basemap constructor.\n        \"\"\"        \n        tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, show=show, **kwargs)\n        self.add_child(tile_layer)\n\n    def add_geojson(self, data, name=\"GeoJSON\", show=True, **kwargs):\n\"\"\"Add a GeoJSON layer to the map.\n\n        Args:\n            data (str, dict): The GeoJSON data or URL to the GeoJSON data.\n            name (str, optional): The layer name. Defaults to \"Untitled\".\n            show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n            kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n        \"\"\"        \n        geo_json = folium.GeoJson(data=data, name=name, show=show, **kwargs)\n        self.add_child(geo_json)\n\n\n    def add_shp(self, in_shp, name=\"Shapefile\", show=True, **kwargs):\n\"\"\"Add a shapefile to the map.\n\n        Args:\n            in_shp (str): The input shapefile path.\n            name (str, optional): The layer name. Defaults to \"Untitled\".\n            show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n            kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n        \"\"\"        \n        geo_json = folium.GeoJson(data=in_shp, name=name, show=show, **kwargs)\n        self.add_child(geo_json)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, width='100%', height='100%', **kwargs)</code>  <code>special</code>","text":"<p>Initialize a folium map object</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>the map location or center. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>the map zoom level. Defaults to 2.</p> <code>2</code> <code>width</code> <code>str</code> <p>the map width. Defaults to '100%'.</p> <code>'100%'</code> <code>height</code> <code>str</code> <p>the map height. Defaults to '100%'.</p> <code>'100%'</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def __init__(self, center=[20, 0], zoom = 2, width='100%', height='100%', **kwargs)-&gt; None:\n\"\"\"Initialize a folium map object\n\n    Args:\n        center (list, optional): the map location or center. Defaults to [20, 0].\n        zoom (int, optional): the map zoom level. Defaults to 2.\n        width (str, optional): the map width. Defaults to '100%'.\n        height (str, optional): the map height. Defaults to '100%'.\n    \"\"\"        \n    super().__init__(location=center, zoom_start=zoom, width=width, height=height, **kwargs)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_basemap_xyz","title":"<code>add_basemap_xyz(self, url, name, attribution='', show=True, **kwargs)</code>","text":"<p>Add a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The tile layer url.</p> required <code>name</code> <code>str</code> <p>The tile layer name.</p> required <code>attribution</code> <code>str</code> <p>The tile layer attribution. Defaults to ''.</p> <code>''</code> <code>show</code> <code>bool</code> <p>Whether to show the basemap in the layer control. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the basemap constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_basemap_xyz(self, url, name, attribution='', show=True, **kwargs):\n\"\"\"Add a basemap to the map.\n\n    Args:\n        url (str): The tile layer url.\n        name (str): The tile layer name.\n        attribution (str, optional): The tile layer attribution. Defaults to ''.\n        show (bool, optional): Whether to show the basemap in the layer control. Defaults to True.\n        kwargs: Additional keyword arguments to pass to the basemap constructor.\n    \"\"\"        \n    tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, show=show, **kwargs)\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', show=True, **kwargs)</code>","text":"<p>Add a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, dict</code> <p>The GeoJSON data or URL to the GeoJSON data.</p> required <code>name</code> <code>str</code> <p>The layer name. Defaults to \"Untitled\".</p> <code>'GeoJSON'</code> <code>show</code> <code>bool</code> <p>Whether to show the layer in the layer control. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the GeoJSON constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_geojson(self, data, name=\"GeoJSON\", show=True, **kwargs):\n\"\"\"Add a GeoJSON layer to the map.\n\n    Args:\n        data (str, dict): The GeoJSON data or URL to the GeoJSON data.\n        name (str, optional): The layer name. Defaults to \"Untitled\".\n        show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n        kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n    \"\"\"        \n    geo_json = folium.GeoJson(data=data, name=name, show=show, **kwargs)\n    self.add_child(geo_json)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_shp","title":"<code>add_shp(self, in_shp, name='Shapefile', show=True, **kwargs)</code>","text":"<p>Add a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_shp</code> <code>str</code> <p>The input shapefile path.</p> required <code>name</code> <code>str</code> <p>The layer name. Defaults to \"Untitled\".</p> <code>'Shapefile'</code> <code>show</code> <code>bool</code> <p>Whether to show the layer in the layer control. Defaults to True.</p> <code>True</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the GeoJSON constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_shp(self, in_shp, name=\"Shapefile\", show=True, **kwargs):\n\"\"\"Add a shapefile to the map.\n\n    Args:\n        in_shp (str): The input shapefile path.\n        name (str, optional): The layer name. Defaults to \"Untitled\".\n        show (bool, optional): Whether to show the layer in the layer control. Defaults to True.\n        kwargs: Additional keyword arguments to pass to the GeoJSON constructor.\n    \"\"\"        \n    geo_json = folium.GeoJson(data=in_shp, name=name, show=show, **kwargs)\n    self.add_child(geo_json)\n</code></pre>"},{"location":"foliumpyt/#rastvectpy.foliumpyt.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The tile layer url.</p> required <code>name</code> <code>str</code> <p>The tile layer name.</p> required <code>attribution</code> <code>str</code> <p>The tile layer attribution. Defaults to ''.</p> <code>''</code> <code>kwargs</code> <p>Additional keyword arguments to pass to the tile layer constructor.</p> <code>{}</code> Source code in <code>rastvectpy/foliumpyt.py</code> <pre><code>def add_tile_layer(self, url, name, attribution ='', **kwargs):\n\"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): The tile layer url.\n        name (str): The tile layer name.\n        attribution (str, optional): The tile layer attribution. Defaults to ''.\n        kwargs: Additional keyword arguments to pass to the tile layer constructor.\n    \"\"\"        \n    tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install rastvectpy, run this command in your terminal:</p> <pre><code>pip install rastvectpy\n</code></pre> <p>This is the preferred method to install rastvectpy, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for rastvectpy can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/lukmanfash/rastvectpy\n</code></pre>"},{"location":"rastvectpy/","title":"rastvectpy module","text":"<p>Main module.</p>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map","title":"<code> Map            (Map)         </code>","text":"<p>The Map class inherits ipyleaflet.Map</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>_type_</code> <p>ipyleaflet module for visualizing vector data</p> required Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>class Map(ipyleaflet.Map):\n\"\"\"The Map class inherits ipyleaflet.Map\n\n    Args:\n        ipyleaflet (_type_): ipyleaflet module for visualizing vector data\n    \"\"\"    \n\n    def __init__(self, **kwargs)-&gt; None:\n\"\"\" Initialize an ipyleaflet map object.\n\n        Args:\n            center (_type_): center of the map\n            zoom (_type_): zoom level of the map\n        \"\"\"\n\n        if \"center\" not in kwargs:\n            kwargs[\"center\"] = [20, 0]\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"layer_control\" not in kwargs:\n            kwargs[\"layer_control\"] = True\n\n        if kwargs[\"layer_control\"]:\n            self.add_layer_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        super().__init__(**kwargs)\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n        if \"height\" in kwargs:\n            self.layout.height = kwargs[\"height\"]\n        else:\n            self.layout.height = \"500px\"\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Add a search control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.SearchControl constructor.\n        \"\"\"  \n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"      \n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(ipyleaflet.SearchControl(**kwargs))\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Add a draw control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.DrawControl constructor.\n        \"\"\"  \n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layer_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a layer control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.LayersControl constructor.\n        \"\"\"  \n        layer_control = ipyleaflet.LayersControl(position=position, **kwargs)\n        self.add_control(layer_control)\n\n    def add_fullscreen_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a fullscreen control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the ipyleaflet.FullScreenControl constructor.\n        \"\"\"  \n        fullscreen_control = ipyleaflet.FullScreenControl(position=position, **kwargs)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Add a tile layer to the map.\n\n        Args:\n            url (str): The url of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str): The attribution of the tile layer.\n            kwargs: Keyword arguments to pass to the ipyleaflet.TileLayer constructor.\n        \"\"\"  \n        tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n        self.add_layer(tile_layer)\n\n\n    def add_basemap(self, basemap, **kwargs):\n        import xyzservices.providers as xyz\n\"\"\"Add a basemap to the map.\n\n        Args:\n            basemap (str): The name of the basemap.\n            kwargs: Keyword arguments to pass to the ipyleaflet.basemap constructor.\n        \"\"\"  \n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'            \n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"terrain\":\n            url = 'http://mt0.google.com/vt/lyrs=p&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"hybrid\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attriution = attribution)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' is not supported. Please choose one of the following: roadmap, satellite, terrain, hybrid or provide a valid url.\")\n\n\n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Add a geojson to the map.\n\n        Args:\n            data (dict): The geojson data.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoJSON constructor.\n        \"\"\"  \n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Add a shapefile to the map.\n\n        Args:\n            data (str): The url of the shapefile.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n        \"\"\"  \n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        # geojson = gdf.to_json() : this convert to a string but needs to be converted to a dictionary\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def add_shp(self, url, name='Shapefile', **kwargs):\n\"\"\"Add a shapefile to the map.\n\n        Args:\n            data (str): The url of the shapefile.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n        \"\"\"  \n        import geopandas as gpd\n        gdf = gpd.read_file(url)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def read_geojson_from_url(url):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            gdf = gpd.read_file(response.content)\n            return gdf\n        except (ValueError, requests.exceptions.RequestException) as e:\n            print(\"Error:\", e)\n        return None\n\n\n    def add_vector(self, vector_data, name='Vector', **kwargs):\n\"\"\"Add a vector data to the map.\n\n        Args:\n            vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n            kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n        \"\"\"  \n        import geopandas as gpd\n        gdf = gpd.GeoDataFrame(geometry=gpd.points_from_xy(vector_data[0], vector_data[1]))\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def add_raster(self, url, name ='Raster', fit_bounds = True, **kwargs):\n\"\"\"Add a raster data to the map.\n\n        Args:\n            url (str): The url of the raster data.\n            name (str): The name of the raster data.\n            fit_bounds (bool, optional): Whether to fit the map to the extent of the raster data.\n            kwargs: Keyword arguments to pass to the ipyleaflet.ImageOverlay constructor.\n        \"\"\"  \n        import httpx\n        titiler_endpoint = \"https://titiler.xyz\"\n\n            # Get bounds(bounding box)\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n            # Get th tile url\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n            # Get the tile = the url of the raster data\n        tile = r['tiles'][0]\n\n            # Add the tile to the map\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n            # Decision to fit the map to the bounds\n        if fit_bounds:\n            bbx = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbx)\n\n\n    def add_widget(self, content, position=\"bottomright\", **kwargs):\n\"\"\"Add a widget (e.g., text, HTML, figure) to the map.\n\n        Args:\n            content (str | ipywidgets.Widget | object): The widget to add.\n            position (str, optional): The position of the widget. Defaults to \"bottomright\".\n            **kwargs: Other keyword arguments for ipywidgets.HTML().\n        \"\"\"\n\n        allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n        if position not in allowed_positions:\n            raise Exception(f\"position must be one of {allowed_positions}\")\n\n        if \"layout\" not in kwargs:\n            kwargs[\"layout\"] = widgets.Layout(padding=\"0px 4px 0px 4px\")\n        try:\n            if isinstance(content, str):\n                widget = widgets.HTML(value=content, **kwargs)\n                control = ipyleaflet.WidgetControl(widget=widget, position=position)\n            else:\n                output = widgets.Output(**kwargs)\n                with output:\n                    display(content)\n                control = ipyleaflet.WidgetControl(widget=output, position=position)\n            self.add(control)\n\n        except Exception as e:\n            raise Exception(f\"Error adding widget: {e}\")\n\n\n    def add_image(self, image, position=\"bottomright\", **kwargs):\n\"\"\"Add an image to the map.\n\n        Args:\n            image (str | ipywidgets.Image): The image to add.\n            position (str, optional): The position of the image, can be one of \"topleft\",\n                \"topright\", \"bottomleft\", \"bottomright\". Defaults to \"bottomright\".\n\n        \"\"\"\n\n        if isinstance(image, str):\n            if image.startswith(\"http\"):\n                image = widgets.Image(value=requests.get(image).content, **kwargs)\n            elif os.path.exists(image):\n                with open(image, \"rb\") as f:\n                    image = widgets.Image(value=f.read(), **kwargs)\n        elif isinstance(image, widgets.Image):\n            pass\n        else:\n            raise Exception(\"Invalid image\")\n\n        self.add_widget(image, position=position)\n\n    def add_html(self, html, position=\"bottomright\", **kwargs):\n\"\"\"Add HTML to the map.\n\n        Args:\n            html (str): The HTML to add.\n            position (str, optional): The position of the HTML, can be one of \"topleft\",\n                \"topright\", \"bottomleft\", \"bottomright\". Defaults to \"bottomright\".\n        \"\"\"\n        self.add_widget(html, position=position, **kwargs)\n\n\n    def change_basemap(self, change, **kwargs):\n        if change['new']:\n            self.add(basemap.value)\n\n\n    def csv_to_shp(self, in_csv, out_shp, x=\"longitude\", y=\"latitude\"):\n\"\"\"_Convert a CSV file to a shapefile\n\n        Args:\n            in_csv (_csv_): _csv_\n            out_shp (_shp_): _vector data_\n            x (str, optional): _str_. Defaults to \"longitude\".\n            y (str, optional): _str_. Defaults to \"latitude\".\n        \"\"\"        \n\n        # Read the CSV file using pandas\n        df = pd.read_csv(in_csv)\n\n        # Create a GeoDataFrame from the DataFrame\n        geometry = gpd.points_from_xy(df[x], df[y])\n        gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n        # Save the GeoDataFrame as a Shapefile\n        gdf.to_file(out_shp, driver='ESRI Shapefile')\n\n    def csv_to_geojson(in_csv, out_geojson, x=\"longitude\", y=\"latitude\"):\n\"\"\"_Convert a CSV file to a GeoJSON file_\n\n        Args:\n            in_csv (_csv_): _csv_\n            out_geojson (_GeoJSON_): _vector data_\n            x (str, optional): _str_. Defaults to \"longitude\".\n            y (str, optional): _str_. Defaults to \"latitude\".\n        \"\"\"        \n\n        # Read the CSV file using pandas\n        df = pd.read_csv(in_csv)\n\n        # Create a GeoDataFrame from the DataFrame\n        geometry = gpd.points_from_xy(df[x], df[y])\n        gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n        # Save the GeoDataFrame as a GeoJSON file\n        gdf.to_file(out_geojson, driver='GeoJSON')\n\n\n    def add_xy_data(\n            self,\n            in_csv,\n            x=\"longitude\",\n            y=\"latitude\",\n            label=None,\n            layer_name=\"Marker cluster\",\n        ):\n\"\"\"Adds points from a CSV file containing lat/lon information and display data on the map.\n\n            Args:\n                in_csv (str): The file path to the input CSV file.\n                x (str, optional): The name of the column containing longitude coordinates. Defaults to \"longitude\".\n                y (str, optional): The name of the column containing latitude coordinates. Defaults to \"latitude\".\n                label (str, optional): The name of the column containing label information to used for marker popup. Defaults to None.\n                layer_name (str, optional): The layer name to use. Defaults to \"Marker cluster\".\n\n            Raises:\n                FileNotFoundError: The specified input csv does not exist.\n                ValueError: The specified x column does not exist.\n                ValueError: The specified y column does not exist.\n                ValueError: The specified label column does not exist.\n            \"\"\"\n            import pandas as pd\n\n            if isinstance(in_csv, pd.DataFrame):\n                df = in_csv\n            elif not in_csv.startswith(\"http\") and (not os.path.exists(in_csv)):\n                raise FileNotFoundError(\"The specified input csv does not exist.\")\n            else:\n                df = pd.read_csv(in_csv)\n\n            col_names = df.columns.values.tolist()\n\n            if x not in col_names:\n                raise ValueError(f\"x must be one of the following: {', '.join(col_names)}\")\n\n            if y not in col_names:\n                raise ValueError(f\"y must be one of the following: {', '.join(col_names)}\")\n\n            if label is not None and (label not in col_names):\n                raise ValueError(\n                    f\"label must be one of the following: {', '.join(col_names)}\"\n                )\n\n            self.default_style = {\"cursor\": \"wait\"}\n\n            points = list(zip(df[y], df[x]))\n\n            if label is not None:\n                labels = df[label]\n                markers = [\n                    ipyleaflet.Marker(\n                        location=point,\n                        draggable=False,\n                        popup=widgets.HTML(str(labels[index])),\n                    )\n                    for index, point in enumerate(points)\n                ]\n            else:\n                markers = [\n                    ipyleaflet.Marker(location=point, draggable=False) for point in points\n                ]\n\n            marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)\n            self.add(marker_cluster)\n\n            self.default_style = {\"cursor\": \"default\"}\n\n            def add_point_layer(\n                self, filename, popup=None, layer_name=\"Marker Cluster\", **kwargs\n            ):\n\"\"\"Adds a point layer to the map with a popup attribute.\n\n                Args:\n                    filename (str): str, http url, path object or file-like object. Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)\n                    popup (str | list, optional): Column name(s) to be used for popup. Defaults to None.\n                    layer_name (str, optional): A layer name to use. Defaults to \"Marker Cluster\".\n\n                Raises:\n                    ValueError: If the specified column name does not exist.\n                    ValueError: If the specified column names do not exist.\n                \"\"\"\n                import warnings\n\n                warnings.filterwarnings(\"ignore\")\n                check_package(name=\"geopandas\", URL=\"https://geopandas.org\")\n                import geopandas as gpd\n                import fiona\n\n                self.default_style = {\"cursor\": \"wait\"}\n\n                if isinstance(filename, gpd.GeoDataFrame):\n                    gdf = filename\n                else:\n                    if not filename.startswith(\"http\"):\n                        filename = os.path.abspath(filename)\n                    ext = os.path.splitext(filename)[1].lower()\n                    if ext == \".kml\":\n                        fiona.drvsupport.supported_drivers[\"KML\"] = \"rw\"\n                        gdf = gpd.read_file(filename, driver=\"KML\", **kwargs)\n                    else:\n                        gdf = gpd.read_file(filename, **kwargs)\n                df = gdf.to_crs(epsg=\"4326\")\n                col_names = df.columns.values.tolist()\n                if popup is not None:\n                    if isinstance(popup, str) and (popup not in col_names):\n                        raise ValueError(\n                            f\"popup must be one of the following: {', '.join(col_names)}\"\n                        )\n                    elif isinstance(popup, list) and (\n                        not all(item in col_names for item in popup)\n                    ):\n                        raise ValueError(\n                            f\"All popup items must be select from: {', '.join(col_names)}\"\n                        )\n\n                df[\"x\"] = df.geometry.x\n                df[\"y\"] = df.geometry.y\n\n                points = list(zip(df[\"y\"], df[\"x\"]))\n\n                if popup is not None:\n                    if isinstance(popup, str):\n                        labels = df[popup]\n                        markers = [\n                            ipyleaflet.Marker(\n                                location=point,\n                                draggable=False,\n                                popup=widgets.HTML(str(labels[index])),\n                            )\n                            for index, point in enumerate(points)\n                        ]\n                    elif isinstance(popup, list):\n                        labels = []\n                        for i in range(len(points)):\n                            label = \"\"\n                            for item in popup:\n                                label = label + str(item) + \": \" + str(df[item][i]) + \"&lt;br&gt;\"\n                            labels.append(label)\n                        df[\"popup\"] = labels\n\n                        markers = [\n                            ipyleaflet.Marker(\n                                location=point,\n                                draggable=False,\n                                popup=widgets.HTML(labels[index]),\n                            )\n                            for index, point in enumerate(points)\n                        ]\n\n                else:\n                    markers = [\n                        ipyleaflet.Marker(location=point, draggable=False) for point in points\n                    ]\n\n                marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)\n                self.add(marker_cluster)\n\n                self.default_style = {\"cursor\": \"default\"}\n\n\n\n    # def change_basemap(m):\n    #     \"\"\"Widget for changing basemaps.\n\n    #     Args:\n    #         m (object): rastvectpy.Map.\n    #     \"\"\"\n    #     from box import Box\n    #     basemaps = Box(xyz_to_leaflet(), frozen_box=True)\n    #     from .rastvectpy import basemaps\n    #     from .basemaps import get_xyz_dict\n\n    #     xyz_dict = get_xyz_dict()\n\n    #     layers = list(m.layers)\n    #     if len(layers) == 1:\n    #         layers = [layers[0]] + [basemaps[\"OpenStreetMap\"]]\n    #     elif len(layers) &gt; 1 and (layers[1].name != \"OpenStreetMap\"):\n    #         layers = [layers[0]] + [basemaps[\"OpenStreetMap\"]] + layers[1:]\n    #     m.layers = layers\n\n    #     value = \"OpenStreetMap\"\n\n    #     dropdown = widgets.Dropdown(\n    #         options=list(basemaps.keys()),\n    #         value=value,\n    #         layout=widgets.Layout(width=\"200px\"),\n    #     )\n\n    #     close_btn = widgets.Button(\n    #         icon=\"times\",\n    #         tooltip=\"Close the basemap widget\",\n    #         button_style=\"primary\",\n    #         layout=widgets.Layout(width=\"32px\"),\n    #     )\n\n    #     basemap_widget = widgets.HBox([dropdown, close_btn])\n\n\n    # def split_basemaps(\n    #     m, layers_dict=None, left_name=None, right_name=None, width=\"120px\", **kwargs\n    # ):\n    #     \"\"\"Create a split-panel map for visualizing two maps.\n\n    #     Args:\n    #         m (ipyleaflet.Map): An ipyleaflet map object.\n    #         layers_dict (dict, optional): A dictionary of TileLayers. Defaults to None.\n    #         left_name (str, optional): The default value of the left dropdown list. Defaults to None.\n    #         right_name (str, optional): The default value of the right dropdown list. Defaults to None.\n    #         width (str, optional): The width of the dropdown list. Defaults to \"120px\".\n    #     \"\"\"\n    #     from .rastvectpy import basemaps\n\n    #     controls = m.controls\n    #     layers = m.layers\n    #     # m.layers = [m.layers[0]]\n    #     m.clear_controls()\n\n    #     add_zoom = True\n    #     add_fullscreen = True\n\n    #     if layers_dict is None:\n    #         layers_dict = {}\n    #         keys = dict(basemaps).keys()\n    #         for key in keys:\n    #             if isinstance(basemaps[key], ipyleaflet.WMSLayer):\n    #                 pass\n    #             else:\n    #                 layers_dict[key] = basemaps[key]\n\n    #     keys = list(layers_dict.keys())\n    #     if left_name is None:\n    #         left_name = keys[0]\n    #     if right_name is None:\n    #         right_name = keys[-1]\n\n    #     left_layer = layers_dict[left_name]\n    #     right_layer = layers_dict[right_name]\n\n    #     control = ipyleaflet.SplitMapControl(left_layer=left_layer, right_layer=right_layer)\n    #     m.add(control)\n\n    #     left_dropdown = widgets.Dropdown(\n    #         options=keys, value=left_name, layout=widgets.Layout(width=width)\n    #     )\n\n    #     left_control = ipyleaflet.WidgetControl(widget=left_dropdown, position=\"topleft\")\n    #     m.add(left_control)\n\n    #     right_dropdown = widgets.Dropdown(\n    #         options=keys, value=right_name, layout=widgets.Layout(width=width)\n    #     )\n\n    #     right_control = ipyleaflet.WidgetControl(widget=right_dropdown, position=\"topright\")\n    #     m.add(right_control)\n\n    #     close_button = widgets.ToggleButton(\n    #         value=False,\n    #         tooltip=\"Close the tool\",\n    #         icon=\"times\",\n    #         # button_style=\"primary\",\n    #         layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=\"0px 0px 0px 4px\"),\n    #     )\n\n\n    def add_text(\n        self,\n        text,\n        fontsize=20,\n        fontcolor=\"black\",\n        bold=False,\n        padding=\"5px\",\n        background=True,\n        bg_color=\"white\",\n        border_radius=\"5px\",\n        position=\"bottomright\",\n        **kwargs,\n    ):\n\"\"\"Add text to the map.\n\n        Args:\n            text (str): The text to add.\n            fontsize (int, optional): The font size. Defaults to 20.\n            fontcolor (str, optional): The font color. Defaults to \"black\".\n            bold (bool, optional): Whether to use bold font. Defaults to False.\n            padding (str, optional): The padding. Defaults to \"5px\".\n            background (bool, optional): Whether to use background. Defaults to True.\n            bg_color (str, optional): The background color. Defaults to \"white\".\n            border_radius (str, optional): The border radius. Defaults to \"5px\".\n            position (str, optional): The position of the widget. Defaults to \"bottomright\".\n        \"\"\"\n\n        if background:\n            text = f\"\"\"&lt;div style=\"font-size: {fontsize}px; color: {fontcolor}; font-weight: {'bold' if bold else 'normal'}; \n            padding: {padding}; background-color: {bg_color}; \n            border-radius: {border_radius};\"&gt;{text}&lt;/div&gt;\"\"\"\n        else:\n            text = f\"\"\"&lt;div style=\"font-size: {fontsize}px; color: {fontcolor}; font-weight: {'bold' if bold else 'normal'}; \n            padding: {padding};\"&gt;{text}&lt;/div&gt;\"\"\"\n\n        self.add_html(text, position=position, **kwargs)\n\n\n\n# def to_streamlit(self, width=None, height=600, scrolling=False, **kwargs):\n#     \"\"\"Renders map figure in a Streamlit app.\n\n#     Args:\n#         width (int, optional): Width of the map. Defaults to None.\n#         height (int, optional): Height of the map. Defaults to 600.\n#         responsive (bool, optional): Whether to make the map responsive. Defaults to True.\n#         scrolling (bool, optional): If True, show a scrollbar when the content is larger than the iframe. Otherwise, do not show a scrollbar. Defaults to False.\n\n#     Returns:\n#         streamlit.components: components.html object.\n#     \"\"\"\n\n#     try:\n#         import streamlit.components.v1 as components\n\n#         # if responsive:\n#         #     make_map_responsive = \"\"\"\n#         #     &lt;style&gt;\n#         #     [title~=\"st.iframe\"] { width: 100%}\n#         #     &lt;/style&gt;\n#         #     \"\"\"\n#         #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n#         return components.html(\n#             self.to_html(), width=width, height=height, scrolling=scrolling\n#         )\n\n#     except Exception as e:\n#         raise Exception(e)\n\n\n    def visualize_raster(raster_data):    \n\"\"\"\n        Visualize a raster data using matplotlib.\n\n        Parameters:\n        raster_data (numpy.ndarray): A 2D array of raster data.\n\n        Returns:\n        None\n        \"\"\"\n        # Create a figure and axis object\n        fig, ax = plt.subplots()\n        # Set the aspect ratio\n        ax.set_aspect('equal')\n        # Show the raster data as an image\n        ax.imshow(raster_data, cmap='gray')\n        # Set the x and y axis labels\n        ax.set_xlabel('X')\n        ax.set_ylabel('Y')\n        # Show the plot\n        plt.show()\n\n\n    def visualize_vector(vector_data):\n\"\"\"\n        Visualize a vector data using matplotlib.\n\n        Parameters:\n        vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n\n        Returns:\n        None\n        \"\"\"\n        # Create a figure and axis object\n        fig, ax = plt.subplots()\n        # Plot the vector data\n        ax.quiver(vector_data[0], vector_data[1], color='blue', scale=1, units='xy', width=0.005, headwidth=5, headlength=7)\n        # Set the x and y axis limits\n        ax.set_xlim([min(vector_data[0])-1, max(vector_data[0])+1])\n        ax.set_ylim([min(vector_data[1])-1, max(vector_data[1])+1])\n        # Set the x and y axis labels\n        ax.set_xlabel('X')\n        ax.set_ylabel('Y')\n        # Show plot\n        plt.show()\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.__init__","title":"<code>__init__(self, **kwargs)</code>  <code>special</code>","text":"<p>Initialize an ipyleaflet map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>_type_</code> <p>center of the map</p> required <code>zoom</code> <code>_type_</code> <p>zoom level of the map</p> required Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def __init__(self, **kwargs)-&gt; None:\n\"\"\" Initialize an ipyleaflet map object.\n\n    Args:\n        center (_type_): center of the map\n        zoom (_type_): zoom level of the map\n    \"\"\"\n\n    if \"center\" not in kwargs:\n        kwargs[\"center\"] = [20, 0]\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"layer_control\" not in kwargs:\n        kwargs[\"layer_control\"] = True\n\n    if kwargs[\"layer_control\"]:\n        self.add_layer_control()\n\n    if \"fullscreen_control\" not in kwargs:\n        kwargs[\"fullscreen_control\"] = True\n\n    super().__init__(**kwargs)\n\n    if kwargs[\"fullscreen_control\"]:\n        self.add_fullscreen_control()\n\n    if \"height\" in kwargs:\n        self.layout.height = kwargs[\"height\"]\n    else:\n        self.layout.height = \"500px\"\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Add a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.DrawControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Add a draw control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.DrawControl constructor.\n    \"\"\"  \n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topright', **kwargs)</code>","text":"<p>Add a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.FullScreenControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_fullscreen_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a fullscreen control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.FullScreenControl constructor.\n    \"\"\"  \n    fullscreen_control = ipyleaflet.FullScreenControl(position=position, **kwargs)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Add a geojson to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The geojson data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.GeoJSON constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Add a geojson to the map.\n\n    Args:\n        data (dict): The geojson data.\n        kwargs: Keyword arguments to pass to the ipyleaflet.GeoJSON constructor.\n    \"\"\"  \n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_html","title":"<code>add_html(self, html, position='bottomright', **kwargs)</code>","text":"<p>Add HTML to the map.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>The HTML to add.</p> required <code>position</code> <code>str</code> <p>The position of the HTML, can be one of \"topleft\", \"topright\", \"bottomleft\", \"bottomright\". Defaults to \"bottomright\".</p> <code>'bottomright'</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_html(self, html, position=\"bottomright\", **kwargs):\n\"\"\"Add HTML to the map.\n\n    Args:\n        html (str): The HTML to add.\n        position (str, optional): The position of the HTML, can be one of \"topleft\",\n            \"topright\", \"bottomleft\", \"bottomright\". Defaults to \"bottomright\".\n    \"\"\"\n    self.add_widget(html, position=position, **kwargs)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_image","title":"<code>add_image(self, image, position='bottomright', **kwargs)</code>","text":"<p>Add an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str | ipywidgets.Image</code> <p>The image to add.</p> required <code>position</code> <code>str</code> <p>The position of the image, can be one of \"topleft\", \"topright\", \"bottomleft\", \"bottomright\". Defaults to \"bottomright\".</p> <code>'bottomright'</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_image(self, image, position=\"bottomright\", **kwargs):\n\"\"\"Add an image to the map.\n\n    Args:\n        image (str | ipywidgets.Image): The image to add.\n        position (str, optional): The position of the image, can be one of \"topleft\",\n            \"topright\", \"bottomleft\", \"bottomright\". Defaults to \"bottomright\".\n\n    \"\"\"\n\n    if isinstance(image, str):\n        if image.startswith(\"http\"):\n            image = widgets.Image(value=requests.get(image).content, **kwargs)\n        elif os.path.exists(image):\n            with open(image, \"rb\") as f:\n                image = widgets.Image(value=f.read(), **kwargs)\n    elif isinstance(image, widgets.Image):\n        pass\n    else:\n        raise Exception(\"Invalid image\")\n\n    self.add_widget(image, position=position)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright', **kwargs)</code>","text":"<p>Add a layer control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.LayersControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_layer_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a layer control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.LayersControl constructor.\n    \"\"\"  \n    layer_control = ipyleaflet.LayersControl(position=position, **kwargs)\n    self.add_control(layer_control)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Add a raster data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the raster data.</p> required <code>name</code> <code>str</code> <p>The name of the raster data.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map to the extent of the raster data.</p> <code>True</code> <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.ImageOverlay constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_raster(self, url, name ='Raster', fit_bounds = True, **kwargs):\n\"\"\"Add a raster data to the map.\n\n    Args:\n        url (str): The url of the raster data.\n        name (str): The name of the raster data.\n        fit_bounds (bool, optional): Whether to fit the map to the extent of the raster data.\n        kwargs: Keyword arguments to pass to the ipyleaflet.ImageOverlay constructor.\n    \"\"\"  \n    import httpx\n    titiler_endpoint = \"https://titiler.xyz\"\n\n        # Get bounds(bounding box)\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n        # Get th tile url\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n        # Get the tile = the url of the raster data\n    tile = r['tiles'][0]\n\n        # Add the tile to the map\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        # Decision to fit the map to the bounds\n    if fit_bounds:\n        bbx = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbx)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Add a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.SearchControl constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Add a search control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the ipyleaflet.SearchControl constructor.\n    \"\"\"  \n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"      \n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(ipyleaflet.SearchControl(**kwargs))\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_shp","title":"<code>add_shp(self, url, name='Shapefile', **kwargs)</code>","text":"<p>Add a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The url of the shapefile.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.GeoData constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_shp(self, url, name='Shapefile', **kwargs):\n\"\"\"Add a shapefile to the map.\n\n    Args:\n        data (str): The url of the shapefile.\n        kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n    \"\"\"  \n    import geopandas as gpd\n    gdf = gpd.read_file(url)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_text","title":"<code>add_text(self, text, fontsize=20, fontcolor='black', bold=False, padding='5px', background=True, bg_color='white', border_radius='5px', position='bottomright', **kwargs)</code>","text":"<p>Add text to the map.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to add.</p> required <code>fontsize</code> <code>int</code> <p>The font size. Defaults to 20.</p> <code>20</code> <code>fontcolor</code> <code>str</code> <p>The font color. Defaults to \"black\".</p> <code>'black'</code> <code>bold</code> <code>bool</code> <p>Whether to use bold font. Defaults to False.</p> <code>False</code> <code>padding</code> <code>str</code> <p>The padding. Defaults to \"5px\".</p> <code>'5px'</code> <code>background</code> <code>bool</code> <p>Whether to use background. Defaults to True.</p> <code>True</code> <code>bg_color</code> <code>str</code> <p>The background color. Defaults to \"white\".</p> <code>'white'</code> <code>border_radius</code> <code>str</code> <p>The border radius. Defaults to \"5px\".</p> <code>'5px'</code> <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"bottomright\".</p> <code>'bottomright'</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_text(\n    self,\n    text,\n    fontsize=20,\n    fontcolor=\"black\",\n    bold=False,\n    padding=\"5px\",\n    background=True,\n    bg_color=\"white\",\n    border_radius=\"5px\",\n    position=\"bottomright\",\n    **kwargs,\n):\n\"\"\"Add text to the map.\n\n    Args:\n        text (str): The text to add.\n        fontsize (int, optional): The font size. Defaults to 20.\n        fontcolor (str, optional): The font color. Defaults to \"black\".\n        bold (bool, optional): Whether to use bold font. Defaults to False.\n        padding (str, optional): The padding. Defaults to \"5px\".\n        background (bool, optional): Whether to use background. Defaults to True.\n        bg_color (str, optional): The background color. Defaults to \"white\".\n        border_radius (str, optional): The border radius. Defaults to \"5px\".\n        position (str, optional): The position of the widget. Defaults to \"bottomright\".\n    \"\"\"\n\n    if background:\n        text = f\"\"\"&lt;div style=\"font-size: {fontsize}px; color: {fontcolor}; font-weight: {'bold' if bold else 'normal'}; \n        padding: {padding}; background-color: {bg_color}; \n        border-radius: {border_radius};\"&gt;{text}&lt;/div&gt;\"\"\"\n    else:\n        text = f\"\"\"&lt;div style=\"font-size: {fontsize}px; color: {fontcolor}; font-weight: {'bold' if bold else 'normal'}; \n        padding: {padding};\"&gt;{text}&lt;/div&gt;\"\"\"\n\n    self.add_html(text, position=position, **kwargs)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer.</p> <code>''</code> <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.TileLayer constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Add a tile layer to the map.\n\n    Args:\n        url (str): The url of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str): The attribution of the tile layer.\n        kwargs: Keyword arguments to pass to the ipyleaflet.TileLayer constructor.\n    \"\"\"  \n    tile_layer = ipyleaflet.TileLayer(url=url, name=name, attribution=attribution, **kwargs)\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_vector","title":"<code>add_vector(self, vector_data, name='Vector', **kwargs)</code>","text":"<p>Add a vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>vector_data</code> <code>tuple</code> <p>A tuple of two 1D arrays representing the x and y coordinates of the vector data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the ipyleaflet.GeoData constructor.</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_vector(self, vector_data, name='Vector', **kwargs):\n\"\"\"Add a vector data to the map.\n\n    Args:\n        vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n        kwargs: Keyword arguments to pass to the ipyleaflet.GeoData constructor.\n    \"\"\"  \n    import geopandas as gpd\n    gdf = gpd.GeoDataFrame(geometry=gpd.points_from_xy(vector_data[0], vector_data[1]))\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_widget","title":"<code>add_widget(self, content, position='bottomright', **kwargs)</code>","text":"<p>Add a widget (e.g., text, HTML, figure) to the map.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str | ipywidgets.Widget | object</code> <p>The widget to add.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"bottomright\".</p> <code>'bottomright'</code> <code>**kwargs</code> <p>Other keyword arguments for ipywidgets.HTML().</p> <code>{}</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_widget(self, content, position=\"bottomright\", **kwargs):\n\"\"\"Add a widget (e.g., text, HTML, figure) to the map.\n\n    Args:\n        content (str | ipywidgets.Widget | object): The widget to add.\n        position (str, optional): The position of the widget. Defaults to \"bottomright\".\n        **kwargs: Other keyword arguments for ipywidgets.HTML().\n    \"\"\"\n\n    allowed_positions = [\"topleft\", \"topright\", \"bottomleft\", \"bottomright\"]\n\n    if position not in allowed_positions:\n        raise Exception(f\"position must be one of {allowed_positions}\")\n\n    if \"layout\" not in kwargs:\n        kwargs[\"layout\"] = widgets.Layout(padding=\"0px 4px 0px 4px\")\n    try:\n        if isinstance(content, str):\n            widget = widgets.HTML(value=content, **kwargs)\n            control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        else:\n            output = widgets.Output(**kwargs)\n            with output:\n                display(content)\n            control = ipyleaflet.WidgetControl(widget=output, position=position)\n        self.add(control)\n\n    except Exception as e:\n        raise Exception(f\"Error adding widget: {e}\")\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.add_xy_data","title":"<code>add_xy_data(self, in_csv, x='longitude', y='latitude', label=None, layer_name='Marker cluster')</code>","text":"<p>Adds points from a CSV file containing lat/lon information and display data on the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>str</code> <p>The file path to the input CSV file.</p> required <code>x</code> <code>str</code> <p>The name of the column containing longitude coordinates. Defaults to \"longitude\".</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>The name of the column containing latitude coordinates. Defaults to \"latitude\".</p> <code>'latitude'</code> <code>label</code> <code>str</code> <p>The name of the column containing label information to used for marker popup. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to \"Marker cluster\".</p> <code>'Marker cluster'</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>The specified input csv does not exist.</p> <code>ValueError</code> <p>The specified x column does not exist.</p> <code>ValueError</code> <p>The specified y column does not exist.</p> <code>ValueError</code> <p>The specified label column does not exist.</p> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def add_xy_data(\n        self,\n        in_csv,\n        x=\"longitude\",\n        y=\"latitude\",\n        label=None,\n        layer_name=\"Marker cluster\",\n    ):\n\"\"\"Adds points from a CSV file containing lat/lon information and display data on the map.\n\n        Args:\n            in_csv (str): The file path to the input CSV file.\n            x (str, optional): The name of the column containing longitude coordinates. Defaults to \"longitude\".\n            y (str, optional): The name of the column containing latitude coordinates. Defaults to \"latitude\".\n            label (str, optional): The name of the column containing label information to used for marker popup. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to \"Marker cluster\".\n\n        Raises:\n            FileNotFoundError: The specified input csv does not exist.\n            ValueError: The specified x column does not exist.\n            ValueError: The specified y column does not exist.\n            ValueError: The specified label column does not exist.\n        \"\"\"\n        import pandas as pd\n\n        if isinstance(in_csv, pd.DataFrame):\n            df = in_csv\n        elif not in_csv.startswith(\"http\") and (not os.path.exists(in_csv)):\n            raise FileNotFoundError(\"The specified input csv does not exist.\")\n        else:\n            df = pd.read_csv(in_csv)\n\n        col_names = df.columns.values.tolist()\n\n        if x not in col_names:\n            raise ValueError(f\"x must be one of the following: {', '.join(col_names)}\")\n\n        if y not in col_names:\n            raise ValueError(f\"y must be one of the following: {', '.join(col_names)}\")\n\n        if label is not None and (label not in col_names):\n            raise ValueError(\n                f\"label must be one of the following: {', '.join(col_names)}\"\n            )\n\n        self.default_style = {\"cursor\": \"wait\"}\n\n        points = list(zip(df[y], df[x]))\n\n        if label is not None:\n            labels = df[label]\n            markers = [\n                ipyleaflet.Marker(\n                    location=point,\n                    draggable=False,\n                    popup=widgets.HTML(str(labels[index])),\n                )\n                for index, point in enumerate(points)\n            ]\n        else:\n            markers = [\n                ipyleaflet.Marker(location=point, draggable=False) for point in points\n            ]\n\n        marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)\n        self.add(marker_cluster)\n\n        self.default_style = {\"cursor\": \"default\"}\n\n        def add_point_layer(\n            self, filename, popup=None, layer_name=\"Marker Cluster\", **kwargs\n        ):\n\"\"\"Adds a point layer to the map with a popup attribute.\n\n            Args:\n                filename (str): str, http url, path object or file-like object. Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)\n                popup (str | list, optional): Column name(s) to be used for popup. Defaults to None.\n                layer_name (str, optional): A layer name to use. Defaults to \"Marker Cluster\".\n\n            Raises:\n                ValueError: If the specified column name does not exist.\n                ValueError: If the specified column names do not exist.\n            \"\"\"\n            import warnings\n\n            warnings.filterwarnings(\"ignore\")\n            check_package(name=\"geopandas\", URL=\"https://geopandas.org\")\n            import geopandas as gpd\n            import fiona\n\n            self.default_style = {\"cursor\": \"wait\"}\n\n            if isinstance(filename, gpd.GeoDataFrame):\n                gdf = filename\n            else:\n                if not filename.startswith(\"http\"):\n                    filename = os.path.abspath(filename)\n                ext = os.path.splitext(filename)[1].lower()\n                if ext == \".kml\":\n                    fiona.drvsupport.supported_drivers[\"KML\"] = \"rw\"\n                    gdf = gpd.read_file(filename, driver=\"KML\", **kwargs)\n                else:\n                    gdf = gpd.read_file(filename, **kwargs)\n            df = gdf.to_crs(epsg=\"4326\")\n            col_names = df.columns.values.tolist()\n            if popup is not None:\n                if isinstance(popup, str) and (popup not in col_names):\n                    raise ValueError(\n                        f\"popup must be one of the following: {', '.join(col_names)}\"\n                    )\n                elif isinstance(popup, list) and (\n                    not all(item in col_names for item in popup)\n                ):\n                    raise ValueError(\n                        f\"All popup items must be select from: {', '.join(col_names)}\"\n                    )\n\n            df[\"x\"] = df.geometry.x\n            df[\"y\"] = df.geometry.y\n\n            points = list(zip(df[\"y\"], df[\"x\"]))\n\n            if popup is not None:\n                if isinstance(popup, str):\n                    labels = df[popup]\n                    markers = [\n                        ipyleaflet.Marker(\n                            location=point,\n                            draggable=False,\n                            popup=widgets.HTML(str(labels[index])),\n                        )\n                        for index, point in enumerate(points)\n                    ]\n                elif isinstance(popup, list):\n                    labels = []\n                    for i in range(len(points)):\n                        label = \"\"\n                        for item in popup:\n                            label = label + str(item) + \": \" + str(df[item][i]) + \"&lt;br&gt;\"\n                        labels.append(label)\n                    df[\"popup\"] = labels\n\n                    markers = [\n                        ipyleaflet.Marker(\n                            location=point,\n                            draggable=False,\n                            popup=widgets.HTML(labels[index]),\n                        )\n                        for index, point in enumerate(points)\n                    ]\n\n            else:\n                markers = [\n                    ipyleaflet.Marker(location=point, draggable=False) for point in points\n                ]\n\n            marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)\n            self.add(marker_cluster)\n\n            self.default_style = {\"cursor\": \"default\"}\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.csv_to_geojson","title":"<code>csv_to_geojson(in_csv, out_geojson, x='longitude', y='latitude')</code>","text":"<p>Convert a CSV file to a GeoJSON file</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>_csv_</code> <p>csv</p> required <code>out_geojson</code> <code>_GeoJSON_</code> <p>vector data</p> required <code>x</code> <code>str</code> <p>str. Defaults to \"longitude\".</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>str. Defaults to \"latitude\".</p> <code>'latitude'</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def csv_to_geojson(in_csv, out_geojson, x=\"longitude\", y=\"latitude\"):\n\"\"\"_Convert a CSV file to a GeoJSON file_\n\n    Args:\n        in_csv (_csv_): _csv_\n        out_geojson (_GeoJSON_): _vector data_\n        x (str, optional): _str_. Defaults to \"longitude\".\n        y (str, optional): _str_. Defaults to \"latitude\".\n    \"\"\"        \n\n    # Read the CSV file using pandas\n    df = pd.read_csv(in_csv)\n\n    # Create a GeoDataFrame from the DataFrame\n    geometry = gpd.points_from_xy(df[x], df[y])\n    gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n    # Save the GeoDataFrame as a GeoJSON file\n    gdf.to_file(out_geojson, driver='GeoJSON')\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.csv_to_shp","title":"<code>csv_to_shp(self, in_csv, out_shp, x='longitude', y='latitude')</code>","text":"<p>_Convert a CSV file to a shapefile</p> <p>Parameters:</p> Name Type Description Default <code>in_csv</code> <code>_csv_</code> <p>csv</p> required <code>out_shp</code> <code>_shp_</code> <p>vector data</p> required <code>x</code> <code>str</code> <p>str. Defaults to \"longitude\".</p> <code>'longitude'</code> <code>y</code> <code>str</code> <p>str. Defaults to \"latitude\".</p> <code>'latitude'</code> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def csv_to_shp(self, in_csv, out_shp, x=\"longitude\", y=\"latitude\"):\n\"\"\"_Convert a CSV file to a shapefile\n\n    Args:\n        in_csv (_csv_): _csv_\n        out_shp (_shp_): _vector data_\n        x (str, optional): _str_. Defaults to \"longitude\".\n        y (str, optional): _str_. Defaults to \"latitude\".\n    \"\"\"        \n\n    # Read the CSV file using pandas\n    df = pd.read_csv(in_csv)\n\n    # Create a GeoDataFrame from the DataFrame\n    geometry = gpd.points_from_xy(df[x], df[y])\n    gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n    # Save the GeoDataFrame as a Shapefile\n    gdf.to_file(out_shp, driver='ESRI Shapefile')\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.visualize_raster","title":"<code>visualize_raster(raster_data)</code>","text":"<p>Visualize a raster data using matplotlib.</p> <p>raster_data (numpy.ndarray): A 2D array of raster data.</p> <p>None</p> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def visualize_raster(raster_data):    \n\"\"\"\n    Visualize a raster data using matplotlib.\n\n    Parameters:\n    raster_data (numpy.ndarray): A 2D array of raster data.\n\n    Returns:\n    None\n    \"\"\"\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n    # Set the aspect ratio\n    ax.set_aspect('equal')\n    # Show the raster data as an image\n    ax.imshow(raster_data, cmap='gray')\n    # Set the x and y axis labels\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    # Show the plot\n    plt.show()\n</code></pre>"},{"location":"rastvectpy/#rastvectpy.rastvectpy.Map.visualize_vector","title":"<code>visualize_vector(vector_data)</code>","text":"<p>Visualize a vector data using matplotlib.</p> <p>vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.</p> <p>None</p> Source code in <code>rastvectpy/rastvectpy.py</code> <pre><code>def visualize_vector(vector_data):\n\"\"\"\n    Visualize a vector data using matplotlib.\n\n    Parameters:\n    vector_data (tuple): A tuple of two 1D arrays representing the x and y coordinates of the vector data.\n\n    Returns:\n    None\n    \"\"\"\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n    # Plot the vector data\n    ax.quiver(vector_data[0], vector_data[1], color='blue', scale=1, units='xy', width=0.005, headwidth=5, headlength=7)\n    # Set the x and y axis limits\n    ax.set_xlim([min(vector_data[0])-1, max(vector_data[0])+1])\n    ax.set_ylim([min(vector_data[1])-1, max(vector_data[1])+1])\n    # Set the x and y axis labels\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    # Show plot\n    plt.show()\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use rastvectpy in a project:</p> <pre><code>import rastvectpy\n</code></pre>"},{"location":"examples/Introd/","title":"Introd","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment the code below in colab: \n# %pip install git+https://github.com/lukmanfash/rastvectpy.git\n</pre> # Uncomment the code below in colab:  # %pip install git+https://github.com/lukmanfash/rastvectpy.git In\u00a0[\u00a0]: Copied! <pre>##User adding basemap (hybrid, roadmap, satellite, terrain) tile layer url.\n\nimport rastvectpy\nimport ipyleaflet\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nurl = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\nlayer = ipyleaflet.TileLayer(url=url, name=\"Google Satellite\", attribution=\"Google\")\nm.add_layer(layer)\nm\n</pre> ##User adding basemap (hybrid, roadmap, satellite, terrain) tile layer url.  import rastvectpy import ipyleaflet m = rastvectpy.Map(center = [40, -100], zoom = 3) url = \"http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\" layer = ipyleaflet.TileLayer(url=url, name=\"Google Satellite\", attribution=\"Google\") m.add_layer(layer) m In\u00a0[\u00a0]: Copied! <pre>m = rastvectpy.Map(center = [40, -100], zoom = 3, )\nm.add_search_control(position = 'topleft', zoom = 10)\nm.add_draw_control(position= \"topleft\")\nm.scroll_wheel_zoom=True\nm.add_layer_control()\n</pre> m = rastvectpy.Map(center = [40, -100], zoom = 3, ) m.add_search_control(position = 'topleft', zoom = 10) m.add_draw_control(position= \"topleft\") m.scroll_wheel_zoom=True m.add_layer_control() In\u00a0[\u00a0]: Copied! <pre>##User adding basemap name(string): hybrid, roadmap, satellite, terrain.\n\nimport rastvectpy\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nm.add_basemap(\"terrain\")\nm\n</pre> ##User adding basemap name(string): hybrid, roadmap, satellite, terrain.  import rastvectpy m = rastvectpy.Map(center = [40, -100], zoom = 3) m.add_basemap(\"terrain\") m In\u00a0[\u00a0]: Copied! <pre># using the xyz service package to generate basemap as a repo of several basemaps;\n# Note to check all the map categories in xyz services, syntax is:  xyz.keys()\n# For Esri basemaps, syntax is: xyz.Esri.keys()\n# For cartoDB basemaps, syntax is: xyz.CartoDB.keys()\n# to add any of those basemaps, syntax is: xyz.Esri.WorldImagery.build_url()\n# or xyz.CartoDB.DarkMatter.build_url()\n# or m.add_basemap(\"Esri.WorldImagery\")\n# or m.add_basemap(\"CartoDB.DarkMatter\")\n#to create a function to list all the basemaps\n\nimport xyzservices.providers as xyz\nimport rastvectpy\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nurl2= xyz.Esri.WorldImagery.build_url()\nm.add_tile_layer(url2, name=\"Esri World Imagery\")\nm\n</pre> # using the xyz service package to generate basemap as a repo of several basemaps; # Note to check all the map categories in xyz services, syntax is:  xyz.keys() # For Esri basemaps, syntax is: xyz.Esri.keys() # For cartoDB basemaps, syntax is: xyz.CartoDB.keys() # to add any of those basemaps, syntax is: xyz.Esri.WorldImagery.build_url() # or xyz.CartoDB.DarkMatter.build_url() # or m.add_basemap(\"Esri.WorldImagery\") # or m.add_basemap(\"CartoDB.DarkMatter\") #to create a function to list all the basemaps  import xyzservices.providers as xyz import rastvectpy m = rastvectpy.Map(center = [40, -100], zoom = 3) url2= xyz.Esri.WorldImagery.build_url() m.add_tile_layer(url2, name=\"Esri World Imagery\") m    In\u00a0[\u00a0]: Copied! <pre># Loading a geojson file\n#i) by adding a geojson file from a local directory/file path as geojson file or zip file\n#ii) by adding a geojson file from a url\n#iii) by providing a dictionary of geojson data\n\n# 1)\nimport rastvectpy\nm = rastvectpy.Map(center = [40, -100], zoom = 3)\nm.add_geojson('data/LoudonCntyTN.geojson', name = 'Loudon County_TN')\nm\n\n# or\nm.add_shp('data/countries.zip', name = 'countries')\n# #to add customization:\n# style={\n#     'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n# },\n# hover_style={\n#     'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5\n# },\n# style_callback=random_color\n# m.add_shp('data/countries.zip', name = 'countries', style=style)\n</pre> # Loading a geojson file #i) by adding a geojson file from a local directory/file path as geojson file or zip file #ii) by adding a geojson file from a url #iii) by providing a dictionary of geojson data  # 1) import rastvectpy m = rastvectpy.Map(center = [40, -100], zoom = 3) m.add_geojson('data/LoudonCntyTN.geojson', name = 'Loudon County_TN') m  # or m.add_shp('data/countries.zip', name = 'countries') # #to add customization: # style={ #     'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1 # }, # hover_style={ #     'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5 # }, # style_callback=random_color # m.add_shp('data/countries.zip', name = 'countries', style=style) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(center=(52.204793, 360.121558), zoom=9)\n\ndark_matter_layer = basemap_to_tiles(basemaps.CartoDB.DarkMatter)\nm.add_layer(dark_matter_layer)\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(center=(52.204793, 360.121558), zoom=9)  dark_matter_layer = basemap_to_tiles(basemaps.CartoDB.DarkMatter) m.add_layer(dark_matter_layer) m In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n# import rastvectpy\n</pre> import numpy as np import matplotlib.pyplot as plt # import rastvectpy In\u00a0[\u00a0]: Copied! <pre>m.add_search_control(position = 'topleft', zoom = 10, url = url)\nm.add_draw_control(position= \"topleft\")\nm.scroll_wheel_zoom=True\nm\n</pre> m.add_search_control(position = 'topleft', zoom = 10, url = url) m.add_draw_control(position= \"topleft\") m.scroll_wheel_zoom=True m  In\u00a0[\u00a0]: Copied! <pre># dropdown = widgets.Dropdown(\n#     options=['terrain', 'satellite', 'roadmap'],\n#     value='roadmap',\n#     description='Basemaps:'\n# )\n# dropdown\n</pre> # dropdown = widgets.Dropdown( #     options=['terrain', 'satellite', 'roadmap'], #     value='roadmap', #     description='Basemaps:' # ) # dropdown In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>raster_data = np.random.randint(0, 255, size=(100, 100))\nvector_data = (np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100))\n</pre> raster_data = np.random.randint(0, 255, size=(100, 100)) vector_data = (np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100)) In\u00a0[\u00a0]: Copied! <pre># rastvectpy.visualize_raster(raster_data)\n</pre> # rastvectpy.visualize_raster(raster_data) In\u00a0[\u00a0]: Copied! <pre># rastvectpy.visualize_vector(vector_data)\n</pre> # rastvectpy.visualize_vector(vector_data) In\u00a0[\u00a0]: Copied! <pre># visualize_raster(np.random.randint(0, 255, size=(100, 100)))\n# visualize_vector((np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100)))\n</pre> # visualize_raster(np.random.randint(0, 255, size=(100, 100))) # visualize_vector((np.random.randint(0, 100, size=100), np.random.randint(0, 100, size=100)))"},{"location":"examples/Untitled/","title":"Untitled","text":"In\u00a0[1]: Copied! <pre>import rastvectpy\nimport ipyleaflet\nfrom ipyleaflet import Map, basemaps, WidgetControl\nfrom ipywidgets import IntSlider, ColorPicker, jslink\nimport ipywidgets as widgets\n</pre> import rastvectpy import ipyleaflet from ipyleaflet import Map, basemaps, WidgetControl from ipywidgets import IntSlider, ColorPicker, jslink import ipywidgets as widgets In\u00a0[2]: Copied! <pre>import rastvectpy\n</pre> import rastvectpy In\u00a0[3]: Copied! <pre>m = rastvectpy.Map(center=[40, -100], zoom=4)\nm\n</pre> m = rastvectpy.Map(center=[40, -100], zoom=4) m <pre>Map(center=[40, -100], controls=(LayersControl(options=['position'], position='topright'), ZoomControl(options\u2026</pre> In\u00a0[\u00a0]: Copied! <pre># m.add_basemap('satellite')\n</pre> # m.add_basemap('satellite') In\u00a0[\u00a0]: Copied! <pre># print(rastvectpy.basemaps.keys())\n</pre> # print(rastvectpy.basemaps.keys()) In\u00a0[\u00a0]: Copied! <pre># rastvectpy.split_map(left_layer=\"ROADMAP\", right_layer=\"HYBRID\")\n</pre> # rastvectpy.split_map(left_layer=\"ROADMAP\", right_layer=\"HYBRID\") In\u00a0[4]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left In\u00a0[5]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=['terrain', 'satellite', 'roadmap'],\n    value='terrain',\n    description='Basemaps:',\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=['terrain', 'satellite', 'roadmap'],     value='terrain',     description='Basemaps:',     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown <pre>Dropdown(description='Basemaps:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), options=('terrain',\u2026</pre> In\u00a0[6]: Copied! <pre>control = ipyleaflet.WidgetControl(widget=dropdown, Position=\"topleft\")\nm.add_control(control)\n</pre> control = ipyleaflet.WidgetControl(widget=dropdown, Position=\"topleft\") m.add_control(control) In\u00a0[7]: Copied! <pre>m.add_control(control)\n</pre> m.add_control(control) In\u00a0[\u00a0]: Copied! <pre># widgets.HTML(\n#     value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n#     placeholder='Some HTML',\n#     description='Some HTML',\n# )\n</pre> # widgets.HTML( #     value=\"Hello World\", #     placeholder='Some HTML', #     description='Some HTML', # ) In\u00a0[\u00a0]: Copied! <pre># widget = widgets.HTML(\n#     value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n# )\n# widget\n</pre> # widget = widgets.HTML( #     value='' # ) # widget In\u00a0[\u00a0]: Copied! <pre># dropdown = widgets.Dropdown(\n#     options=['terrain', 'satellite', 'roadmap'],\n#     value='terrain',\n#     description='Basemaps:',\n#     layout=widgets.Layout(width=widget_width, padding=padding),\n#     style={\"description_width\": \"initial\"},\n# )\n# widgets.jslink((dropdown, 'value'), ((m, 'basemap')))\n# control = WidgetControl(widget=dropdown, position='bottomright')\n# m.add(control)\n# m\n</pre> # dropdown = widgets.Dropdown( #     options=['terrain', 'satellite', 'roadmap'], #     value='terrain', #     description='Basemaps:', #     layout=widgets.Layout(width=widget_width, padding=padding), #     style={\"description_width\": \"initial\"}, # ) # widgets.jslink((dropdown, 'value'), ((m, 'basemap'))) # control = WidgetControl(widget=dropdown, position='bottomright') # m.add(control) # m In\u00a0[\u00a0]: Copied! <pre># def add_xy_data(\n    #     self,\n    #     in_csv,\n    #     x=\"longitude\",\n    #     y=\"latitude\",\n    #     label=None,\n    #     layer_name=\"Marker cluster\",\n    # ):\n    #     \"\"\"Adds points from a CSV file containing lat/lon information and display data on the map.\n\n    #     Args:\n    #         in_csv (str): The file path to the input CSV file.\n    #         x (str, optional): The name of the column containing longitude coordinates. Defaults to \"longitude\".\n    #         y (str, optional): The name of the column containing latitude coordinates. Defaults to \"latitude\".\n    #         label (str, optional): The name of the column containing label information to used for marker popup. Defaults to None.\n    #         layer_name (str, optional): The layer name to use. Defaults to \"Marker cluster\".\n\n    #     Raises:\n    #         FileNotFoundError: The specified input csv does not exist.\n    #         ValueError: The specified x column does not exist.\n    #         ValueError: The specified y column does not exist.\n    #         ValueError: The specified label column does not exist.\n    #     \"\"\"\n    #     import pandas as pd\n\n    #     if isinstance(in_csv, pd.DataFrame):\n    #         df = in_csv\n    #     elif not in_csv.startswith(\"http\") and (not os.path.exists(in_csv)):\n    #         raise FileNotFoundError(\"The specified input csv does not exist.\")\n    #     else:\n    #         df = pd.read_csv(in_csv)\n\n    #     col_names = df.columns.values.tolist()\n\n    #     if x not in col_names:\n    #         raise ValueError(f\"x must be one of the following: {', '.join(col_names)}\")\n\n    #     if y not in col_names:\n    #         raise ValueError(f\"y must be one of the following: {', '.join(col_names)}\")\n\n    #     if label is not None and (label not in col_names):\n    #         raise ValueError(\n    #             f\"label must be one of the following: {', '.join(col_names)}\"\n    #         )\n\n    #     self.default_style = {\"cursor\": \"wait\"}\n\n    #     points = list(zip(df[y], df[x]))\n\n    #     if label is not None:\n    #         labels = df[label]\n    #         markers = [\n    #             ipyleaflet.Marker(\n    #                 location=point,\n    #                 draggable=False,\n    #                 popup=widgets.HTML(str(labels[index])),\n    #             )\n    #             for index, point in enumerate(points)\n    #         ]\n    #     else:\n    #         markers = [\n    #             ipyleaflet.Marker(location=point, draggable=False) for point in points\n    #         ]\n\n    #     marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)\n    #     self.add(marker_cluster)\n\n    #     self.default_style = {\"cursor\": \"default\"}\n\n    # def add_point_layer(\n    #     self, filename, popup=None, layer_name=\"Marker Cluster\", **kwargs\n    # ):\n    #     \"\"\"Adds a point layer to the map with a popup attribute.\n\n    #     Args:\n    #         filename (str): str, http url, path object or file-like object. Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)\n    #         popup (str | list, optional): Column name(s) to be used for popup. Defaults to None.\n    #         layer_name (str, optional): A layer name to use. Defaults to \"Marker Cluster\".\n\n    #     Raises:\n    #         ValueError: If the specified column name does not exist.\n    #         ValueError: If the specified column names do not exist.\n    #     \"\"\"\n    #     import warnings\n\n    #     warnings.filterwarnings(\"ignore\")\n    #     check_package(name=\"geopandas\", URL=\"https://geopandas.org\")\n    #     import geopandas as gpd\n    #     import fiona\n\n    #     self.default_style = {\"cursor\": \"wait\"}\n\n    #     if isinstance(filename, gpd.GeoDataFrame):\n    #         gdf = filename\n    #     else:\n    #         if not filename.startswith(\"http\"):\n    #             filename = os.path.abspath(filename)\n    #         ext = os.path.splitext(filename)[1].lower()\n    #         if ext == \".kml\":\n    #             fiona.drvsupport.supported_drivers[\"KML\"] = \"rw\"\n    #             gdf = gpd.read_file(filename, driver=\"KML\", **kwargs)\n    #         else:\n    #             gdf = gpd.read_file(filename, **kwargs)\n    #     df = gdf.to_crs(epsg=\"4326\")\n    #     col_names = df.columns.values.tolist()\n    #     if popup is not None:\n    #         if isinstance(popup, str) and (popup not in col_names):\n    #             raise ValueError(\n    #                 f\"popup must be one of the following: {', '.join(col_names)}\"\n    #             )\n    #         elif isinstance(popup, list) and (\n    #             not all(item in col_names for item in popup)\n    #         ):\n    #             raise ValueError(\n    #                 f\"All popup items must be select from: {', '.join(col_names)}\"\n    #             )\n\n    #     df[\"x\"] = df.geometry.x\n    #     df[\"y\"] = df.geometry.y\n\n    #     points = list(zip(df[\"y\"], df[\"x\"]))\n\n    #     if popup is not None:\n    #         if isinstance(popup, str):\n    #             labels = df[popup]\n    #             markers = [\n    #                 ipyleaflet.Marker(\n    #                     location=point,\n    #                     draggable=False,\n    #                     popup=widgets.HTML(str(labels[index])),\n    #                 )\n    #                 for index, point in enumerate(points)\n    #             ]\n    #         elif isinstance(popup, list):\n    #             labels = []\n    #             for i in range(len(points)):\n    #                 label = \"\"\n    #                 for item in popup:\n    #                     label = label + str(item) + \": \" + str(df[item][i]) + \"&lt;br&gt;\"\n    #                 labels.append(label)\n    #             df[\"popup\"] = labels\n\n    #             markers = [\n    #                 ipyleaflet.Marker(\n    #                     location=point,\n    #                     draggable=False,\n    #                     popup=widgets.HTML(labels[index]),\n    #                 )\n    #                 for index, point in enumerate(points)\n    #             ]\n\n    #     else:\n    #         markers = [\n    #             ipyleaflet.Marker(location=point, draggable=False) for point in points\n    #         ]\n\n    #     marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)\n    #     self.add(marker_cluster)\n\n    #     self.default_style = {\"cursor\": \"default\"}\n</pre>     # def add_xy_data(     #     self,     #     in_csv,     #     x=\"longitude\",     #     y=\"latitude\",     #     label=None,     #     layer_name=\"Marker cluster\",     # ):     #     \"\"\"Adds points from a CSV file containing lat/lon information and display data on the map.      #     Args:     #         in_csv (str): The file path to the input CSV file.     #         x (str, optional): The name of the column containing longitude coordinates. Defaults to \"longitude\".     #         y (str, optional): The name of the column containing latitude coordinates. Defaults to \"latitude\".     #         label (str, optional): The name of the column containing label information to used for marker popup. Defaults to None.     #         layer_name (str, optional): The layer name to use. Defaults to \"Marker cluster\".      #     Raises:     #         FileNotFoundError: The specified input csv does not exist.     #         ValueError: The specified x column does not exist.     #         ValueError: The specified y column does not exist.     #         ValueError: The specified label column does not exist.     #     \"\"\"     #     import pandas as pd      #     if isinstance(in_csv, pd.DataFrame):     #         df = in_csv     #     elif not in_csv.startswith(\"http\") and (not os.path.exists(in_csv)):     #         raise FileNotFoundError(\"The specified input csv does not exist.\")     #     else:     #         df = pd.read_csv(in_csv)      #     col_names = df.columns.values.tolist()      #     if x not in col_names:     #         raise ValueError(f\"x must be one of the following: {', '.join(col_names)}\")      #     if y not in col_names:     #         raise ValueError(f\"y must be one of the following: {', '.join(col_names)}\")      #     if label is not None and (label not in col_names):     #         raise ValueError(     #             f\"label must be one of the following: {', '.join(col_names)}\"     #         )      #     self.default_style = {\"cursor\": \"wait\"}      #     points = list(zip(df[y], df[x]))      #     if label is not None:     #         labels = df[label]     #         markers = [     #             ipyleaflet.Marker(     #                 location=point,     #                 draggable=False,     #                 popup=widgets.HTML(str(labels[index])),     #             )     #             for index, point in enumerate(points)     #         ]     #     else:     #         markers = [     #             ipyleaflet.Marker(location=point, draggable=False) for point in points     #         ]      #     marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)     #     self.add(marker_cluster)      #     self.default_style = {\"cursor\": \"default\"}      # def add_point_layer(     #     self, filename, popup=None, layer_name=\"Marker Cluster\", **kwargs     # ):     #     \"\"\"Adds a point layer to the map with a popup attribute.      #     Args:     #         filename (str): str, http url, path object or file-like object. Either the absolute or relative path to the file or URL to be opened, or any object with a read() method (such as an open file or StringIO)     #         popup (str | list, optional): Column name(s) to be used for popup. Defaults to None.     #         layer_name (str, optional): A layer name to use. Defaults to \"Marker Cluster\".      #     Raises:     #         ValueError: If the specified column name does not exist.     #         ValueError: If the specified column names do not exist.     #     \"\"\"     #     import warnings      #     warnings.filterwarnings(\"ignore\")     #     check_package(name=\"geopandas\", URL=\"https://geopandas.org\")     #     import geopandas as gpd     #     import fiona      #     self.default_style = {\"cursor\": \"wait\"}      #     if isinstance(filename, gpd.GeoDataFrame):     #         gdf = filename     #     else:     #         if not filename.startswith(\"http\"):     #             filename = os.path.abspath(filename)     #         ext = os.path.splitext(filename)[1].lower()     #         if ext == \".kml\":     #             fiona.drvsupport.supported_drivers[\"KML\"] = \"rw\"     #             gdf = gpd.read_file(filename, driver=\"KML\", **kwargs)     #         else:     #             gdf = gpd.read_file(filename, **kwargs)     #     df = gdf.to_crs(epsg=\"4326\")     #     col_names = df.columns.values.tolist()     #     if popup is not None:     #         if isinstance(popup, str) and (popup not in col_names):     #             raise ValueError(     #                 f\"popup must be one of the following: {', '.join(col_names)}\"     #             )     #         elif isinstance(popup, list) and (     #             not all(item in col_names for item in popup)     #         ):     #             raise ValueError(     #                 f\"All popup items must be select from: {', '.join(col_names)}\"     #             )      #     df[\"x\"] = df.geometry.x     #     df[\"y\"] = df.geometry.y      #     points = list(zip(df[\"y\"], df[\"x\"]))      #     if popup is not None:     #         if isinstance(popup, str):     #             labels = df[popup]     #             markers = [     #                 ipyleaflet.Marker(     #                     location=point,     #                     draggable=False,     #                     popup=widgets.HTML(str(labels[index])),     #                 )     #                 for index, point in enumerate(points)     #             ]     #         elif isinstance(popup, list):     #             labels = []     #             for i in range(len(points)):     #                 label = \"\"     #                 for item in popup:     #                     label = label + str(item) + \": \" + str(df[item][i]) + \"\"     #                 labels.append(label)     #             df[\"popup\"] = labels      #             markers = [     #                 ipyleaflet.Marker(     #                     location=point,     #                     draggable=False,     #                     popup=widgets.HTML(labels[index]),     #                 )     #                 for index, point in enumerate(points)     #             ]      #     else:     #         markers = [     #             ipyleaflet.Marker(location=point, draggable=False) for point in points     #         ]      #     marker_cluster = ipyleaflet.MarkerCluster(markers=markers, name=layer_name)     #     self.add(marker_cluster)      #     self.default_style = {\"cursor\": \"default\"}"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/","title":"Working With COG","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment this line if you need to install the dependencies\n# !pip install folium httpx\n</pre> # Uncomment this line if you need to install the dependencies # !pip install folium httpx In\u00a0[\u00a0]: Copied! <pre>import json\n\nimport httpx\n\nfrom folium import Map, TileLayer\n\n%matplotlib inline\n</pre> import json  import httpx  from folium import Map, TileLayer  %matplotlib inline In\u00a0[\u00a0]: Copied! <pre>titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind.\nurl = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind. url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[\u00a0]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nprint(r)\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] print(r) In\u00a0[\u00a0]: Copied! <pre># Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r, indent=4))\n</pre> # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r, indent=4)) In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=13\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"DigitalGlobe OpenData\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=13 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"DigitalGlobe OpenData\" ) aod_layer.add_to(m) m In\u00a0[\u00a0]: Copied! <pre>url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"\n\n# Fetch File Metadata to get min/max rescaling values (because the file is stored as float32)\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/info\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(r)\nprint(\"Data is of type:\", r[\"dtype\"])\n\n# This dataset has statistics metadata\nminv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"]\nprint(\"With values from \", minv, \"to \", maxv)\n</pre>  url = \"https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2573-1085/swissalti3d_2019_2573-1085_0.5_2056_5728.tif\"  # Fetch File Metadata to get min/max rescaling values (because the file is stored as float32) r = httpx.get(     f\"{titiler_endpoint}/cog/info\",     params = {         \"url\": url,     } ).json()  print(r) print(\"Data is of type:\", r[\"dtype\"])  # This dataset has statistics metadata minv, maxv = r[\"band_metadata\"][0][1][\"STATISTICS_MINIMUM\"], r[\"band_metadata\"][0][1][\"STATISTICS_MAXIMUM\"] print(\"With values from \", minv, \"to \", maxv)   In\u00a0[\u00a0]: Copied! <pre># We could get the min/max values using the statistics endpoint\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/statistics\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nprint(json.dumps(r[\"1\"], indent=4))\n</pre> # We could get the min/max values using the statistics endpoint r = httpx.get(     f\"{titiler_endpoint}/cog/statistics\",     params = {         \"url\": url,     } ).json()  print(json.dumps(r[\"1\"], indent=4)) In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply linear rescaling using Min/Max value</li> </ol> <p>This is needed to rescale the value to byte (0 -&gt; 255) which can then be encoded in JPEG or PNG</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply ColorMap</li> </ol> <p>Now that the data is rescaled to byte values (0 -&gt; 255) we can apply a colormap</p> In\u00a0[\u00a0]: Copied! <pre>r = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"rescale\": f\"{minv},{maxv}\",\n        \"colormap_name\": \"terrain\"\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"rescale\": f\"{minv},{maxv}\",         \"colormap_name\": \"terrain\"     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m <ol> <li>Apply non-linear colormap (intervals)</li> </ol> <p>see https://cogeotiff.github.io/rio-tiler/colormap/#intervals-colormaps</p> In\u00a0[\u00a0]: Copied! <pre>import json\n\ncmap = json.dumps(\n    [\n        # ([min, max], [r, g, b, a])\n        ([0, 1500], [255,255,204, 255]),\n        ([1500, 1700], [161,218,180, 255]),\n        ([1700, 1900], [65,182,196, 255]),\n        ([1900, 2000], [44,127,184, 255]),\n        ([2000, 3000], [37,52,148, 255]),\n    ]\n)\n# https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5\n\nr = httpx.get(\n    f\"{titiler_endpoint}/cog/tilejson.json\",\n    params = {\n        \"url\": url,\n        \"colormap\": cmap\n    }\n).json()\n\nbounds = r[\"bounds\"]\nm = Map(\n    location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),\n    zoom_start=r[\"minzoom\"] + 1\n)\n\naod_layer = TileLayer(\n    tiles=r[\"tiles\"][0],\n    opacity=1,\n    attr=\"Swisstopo\"\n)\naod_layer.add_to(m)\nm\n</pre> import json  cmap = json.dumps(     [         # ([min, max], [r, g, b, a])         ([0, 1500], [255,255,204, 255]),         ([1500, 1700], [161,218,180, 255]),         ([1700, 1900], [65,182,196, 255]),         ([1900, 2000], [44,127,184, 255]),         ([2000, 3000], [37,52,148, 255]),     ] ) # https://colorbrewer2.org/#type=sequential&amp;scheme=YlGnBu&amp;n=5  r = httpx.get(     f\"{titiler_endpoint}/cog/tilejson.json\",     params = {         \"url\": url,         \"colormap\": cmap     } ).json()  bounds = r[\"bounds\"] m = Map(     location=((bounds[1] + bounds[3]) / 2,(bounds[0] + bounds[2]) / 2),     zoom_start=r[\"minzoom\"] + 1 )  aod_layer = TileLayer(     tiles=r[\"tiles\"][0],     opacity=1,     attr=\"Swisstopo\" ) aod_layer.add_to(m) m In\u00a0[\u00a0]: Copied! <pre>import rastvectpy\n</pre> import rastvectpy In\u00a0[\u00a0]: Copied! <pre>m = rastvectpy.Map(center = [40, -100], zoom = 3)\nm\n</pre> m = rastvectpy.Map(center = [40, -100], zoom = 3) m In\u00a0[\u00a0]: Copied! <pre>url = r['tiles'][0]\n</pre> url = r['tiles'][0] In\u00a0[\u00a0]: Copied! <pre>m.add_tile_layer(url, name = 'COG', attribution='DigitalGlobe OpenData')\n</pre> m.add_tile_layer(url, name = 'COG', attribution='DigitalGlobe OpenData') In\u00a0[\u00a0]: Copied! <pre>bounds\n</pre> bounds In\u00a0[\u00a0]: Copied! <pre>bbx = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\nbbx\n</pre> bbx = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]] bbx In\u00a0[\u00a0]: Copied! <pre>m.fit_bounds(bbx)\n</pre> m.fit_bounds(bbx) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#working-with-cog","title":"Working With COG\u00b6","text":"<p>For this demo we will use the new <code>DigitalGlobe OpenData</code> dataset https://www.digitalglobe.com/ecosystem/open-data</p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#requirements","title":"Requirements\u00b6","text":"<ul> <li>folium</li> <li>httpx</li> </ul> <p><code>pip install folium httpx</code></p>"},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-info","title":"Get COG Info\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#get-cog-metadata","title":"Get COG Metadata\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#work-with-non-byte-data","title":"Work with non-byte data\u00b6","text":""},{"location":"examples/Working_with_CloudOptimizedGeoTIFF_simple/#display-tiles","title":"Display Tiles\u00b6","text":"<ol> <li>Without <code>rescaling</code> values, TiTiler will return black/grey tiles because it will rescale the data base on min/max value of the datatype.</li> </ol>"},{"location":"examples/basemap_dropdown/","title":"Basemap dropdown","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment the following line to install rastvectpy in Colab: \n# %pip install git+https://github.com/lukmanfash/rastvectpy.git\n</pre> # Uncomment the following line to install rastvectpy in Colab:  # %pip install git+https://github.com/lukmanfash/rastvectpy.git In\u00a0[\u00a0]: Copied! <pre>import rastvectpy\nimport ipyleaflet\nimport ipywidgets as widgets\nfrom ipyleaflet import Map, basemaps, WidgetControl\nfrom ipywidgets import Dropdown, jslink\n</pre> import rastvectpy import ipyleaflet import ipywidgets as widgets from ipyleaflet import Map, basemaps, WidgetControl from ipywidgets import Dropdown, jslink  In\u00a0[\u00a0]: Copied! <pre>m = rastvectpy.Map(center=[40, -100], zoom=4)\n</pre> m = rastvectpy.Map(center=[40, -100], zoom=4) In\u00a0[\u00a0]: Copied! <pre>widget_width = \"200px\"\npadding = \"0px 0px 0px 2px\"  # upper, right, bottom, left\n</pre> widget_width = \"200px\" padding = \"0px 0px 0px 2px\"  # upper, right, bottom, left In\u00a0[\u00a0]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=['terrain', 'satellite', 'roadmap'],\n    value='terrain',\n    description='Basemaps:',\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\n</pre> dropdown = widgets.Dropdown(     options=['terrain', 'satellite', 'roadmap'],     value='terrain',     description='Basemaps:',     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) In\u00a0[\u00a0]: Copied! <pre>control = ipyleaflet.WidgetControl(widget=dropdown, Position=\"topleft\")\nm.add(control)\n</pre> control = ipyleaflet.WidgetControl(widget=dropdown, Position=\"topleft\") m.add(control) In\u00a0[\u00a0]: Copied! <pre># widgets.jslink((dropdown, 'value'), (m, 'basemap'))\n</pre> # widgets.jslink((dropdown, 'value'), (m, 'basemap'))"},{"location":"examples/basemap_dropdown/#add-a-dropdown-list-to-your-map","title":"Add a dropdown list to your map\u00b6","text":""},{"location":"examples/csvTovector/","title":"csvTovector","text":"In\u00a0[1]: Copied! <pre>import os\nimport rastvectpy\n</pre> import os import rastvectpy  In\u00a0[2]: Copied! <pre>in_csv = 'https://raw.github.com/giswqs/geosdemo/blob/master/docs/examples/data/world_cities.csv'\n</pre>  in_csv = 'https://raw.github.com/giswqs/geosdemo/blob/master/docs/examples/data/world_cities.csv' In\u00a0[3]: Copied! <pre>df = rastvectpy.csv_to_df(in_csv)\ndf\n</pre>  df = rastvectpy.csv_to_df(in_csv) df <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 df = rastvectpy.csv_to_df(in_csv)\n      2 df\n\nAttributeError: module 'rastvectpy' has no attribute 'csv_to_df'</pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment the code below in colab: \n# %pip install git+https://github.com/lukmanfash/rastvectpy.git\n</pre> # Uncomment the code below in colab:  # %pip install git+https://github.com/lukmanfash/rastvectpy.git In\u00a0[\u00a0]: Copied! <pre>import rastvectpy.foliumpyt as rastvectpy\n</pre> import rastvectpy.foliumpyt as rastvectpy In\u00a0[\u00a0]: Copied! <pre>m = rastvectpy.Map(center=[45.5236, -122.6750], zoom = 4)\nurl = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\nm.add_tile_layer(url = url, name=\"Google Satellite\", attribution=\"Google\")\nm\n</pre> m = rastvectpy.Map(center=[45.5236, -122.6750], zoom = 4) url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' m.add_tile_layer(url = url, name=\"Google Satellite\", attribution=\"Google\") m"},{"location":"examples/folium/#adding-tile-layer","title":"Adding Tile layer\u00b6","text":""},{"location":"examples/image/","title":"Image","text":"In\u00a0[\u00a0]: Copied! <pre># Uncomment the following line to install rastvectpy in Colab: \n# %pip install git+https://github.com/lukmanfash/rastvectpy.git\n</pre> # Uncomment the following line to install rastvectpy in Colab:  # %pip install git+https://github.com/lukmanfash/rastvectpy.git In\u00a0[1]: Copied! <pre>import rastvectpy\nfrom ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> import rastvectpy from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[2]: Copied! <pre>m = rastvectpy.Map(center =[40, -100], zoom = 4)\nm\n</pre> m = rastvectpy.Map(center =[40, -100], zoom = 4) m <pre>Map(center=[40, -100], controls=(LayersControl(options=['position'], position='topright'), ZoomControl(options\u2026</pre> In\u00a0[3]: Copied! <pre>url = 'https://www.nasa.gov/sites/all/themes/custom/nasatwo/images/nasa-logo.svg'\n</pre> url = 'https://www.nasa.gov/sites/all/themes/custom/nasatwo/images/nasa-logo.svg' In\u00a0[4]: Copied! <pre>widget = widgets.HTML(\n    value=f'&lt;img src=\"{url}\" width=\"100\" height=\"100\"&gt;'\n)\nwidget\n</pre> widget = widgets.HTML(     value=f'' ) widget <pre>HTML(value='&lt;img src=\"https://www.nasa.gov/sites/all/themes/custom/nasatwo/images/nasa-logo.svg\" width=\"100\" h\u2026</pre> In\u00a0[5]: Copied! <pre>control = WidgetControl(widget=widget, position='bottomright')\nm.add(control)\n</pre> control = WidgetControl(widget=widget, position='bottomright') m.add(control) <pre>Map(bottom=1801.0, center=[40, -100], controls=(LayersControl(options=['position'], position='topright'), Zoom\u2026</pre>"},{"location":"examples/image/#add-an-add_image-method-to-the-map-class-of-your-package-for-adding-a-static-image-eg-a-logo-to-the-map","title":"Add an add_image() method to the Map class of your package for adding a static image (e.g., a logo) to the map\u00b6","text":""},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),     center=(52.204793, 360.121558),     zoom=4 )  m <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre>"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[\u00a0]: Copied! <pre># !pip install rastvectpy\n</pre> # !pip install rastvectpy In\u00a0[\u00a0]: Copied! <pre>import rastvectpy\n</pre> import rastvectpy In\u00a0[\u00a0]: Copied! <pre>m = rastvectpy.Map(center=[40, -100], zoom=5)\n</pre> m = rastvectpy.Map(center=[40, -100], zoom=5) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>m.layers[-1].interact(opacity=(0.0, 1.0, 0.001))\n</pre> m.layers[-1].interact(opacity=(0.0, 1.0, 0.001)) In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import Map, basemaps, WidgetControl\nfrom ipywidgets import IntSlider, ColorPicker, jslink\n\nm = Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.Stamen.Terrain)\nzoom_slider = IntSlider(description='Zoom level:', min=0, max=15, value=7)\njslink((zoom_slider, 'value'), (m, 'zoom'))\nwidget_control1 = WidgetControl(widget=zoom_slider, position='topright')\nm.add_control(widget_control1)\n\ncolor_picker = ColorPicker(description='Pick a color:')\nwidget_control2 = WidgetControl(widget=color_picker, position='bottomright')\nm.add_control(widget_control2)\nm\n</pre> from ipyleaflet import Map, basemaps, WidgetControl from ipywidgets import IntSlider, ColorPicker, jslink  m = Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.Stamen.Terrain) zoom_slider = IntSlider(description='Zoom level:', min=0, max=15, value=7) jslink((zoom_slider, 'value'), (m, 'zoom')) widget_control1 = WidgetControl(widget=zoom_slider, position='topright') m.add_control(widget_control1)  color_picker = ColorPicker(description='Pick a color:') widget_control2 = WidgetControl(widget=color_picker, position='bottomright') m.add_control(widget_control2) m In\u00a0[\u00a0]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name='Raster', fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name='Raster', fit_bounds=True) In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>m.layers[-1].opacity = 0.5\n</pre> m.layers[-1].opacity = 0.5 In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) In\u00a0[\u00a0]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[\u00a0]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000,\n    min=1984,\n    max=2020,\n    step=1,\n    description='Year:'\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000,     min=1984,     max=2020,     step=1,     description='Year:' ) int_slider In\u00a0[\u00a0]: Copied! <pre>int_slider.value\n</pre> int_slider.value In\u00a0[\u00a0]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0,\n    min=-1,\n    max=1,\n    step=0.05,\n    description='Threshold:'\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0,     min=-1,     max=1,     step=0.05,     description='Threshold:' ) float_slider In\u00a0[\u00a0]: Copied! <pre>float_slider.value\n</pre> float_slider.value In\u00a0[\u00a0]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    orientation='horizontal'\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=7,     min=0,     max=10,     step=1,     description='Loading:',     bar_style='', # 'success', 'info', 'warning', 'danger' or ''     orientation='horizontal' ) int_progress In\u00a0[\u00a0]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description='Any:',\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description='Any:', ) int_text In\u00a0[\u00a0]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    description='Any:',\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     description='Any:', ) float_text In\u00a0[\u00a0]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='success', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description='Click me',     disabled=False,     button_style='success', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Description',     icon='check' # (FontAwesome names without the `fa-` prefix) ) toggle_button In\u00a0[\u00a0]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value In\u00a0[\u00a0]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False,     description='Check me',     disabled=False,     indent=False ) checkbox In\u00a0[\u00a0]: Copied! <pre>checkbox.value\n</pre> checkbox.value In\u00a0[\u00a0]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) dropdown In\u00a0[\u00a0]: Copied! <pre>dropdown.value\n</pre> dropdown.value In\u00a0[\u00a0]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) radio_buttons In\u00a0[\u00a0]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value In\u00a0[\u00a0]: Copied! <pre>text = widgets.Text(\n    value='USA',\n    placeholder='Enter a country name',\n    description='Country:',\n    disabled=False\n)\ntext\n</pre> text = widgets.Text(     value='USA',     placeholder='Enter a country name',     description='Country:',     disabled=False ) text In\u00a0[\u00a0]: Copied! <pre>text.value\n</pre> text.value In\u00a0[\u00a0]: Copied! <pre>widgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n</pre> widgets.Textarea(     value='Hello World',     placeholder='Type something',     description='String:',     disabled=False ) In\u00a0[\u00a0]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder='Some HTML',     description='Some HTML', ) In\u00a0[\u00a0]: Copied! <pre>widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n</pre> widgets.HTML(     value='' ) In\u00a0[\u00a0]: Copied! <pre>button = widgets.Button(\n    description='Click me',\n    button_style='info', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n</pre> button = widgets.Button(     description='Click me',     button_style='info', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Click me',     icon='check' # (FontAwesome names without the `fa-` prefix) ) button In\u00a0[\u00a0]: Copied! <pre>date_picker = widgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\ndate_picker\n</pre> date_picker = widgets.DatePicker(     description='Pick a Date',     disabled=False ) date_picker In\u00a0[\u00a0]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[\u00a0]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False,     description='Pick a color',     value='blue',     disabled=False ) color_picker In\u00a0[\u00a0]: Copied! <pre>color_picker.value\n</pre> color_picker.value In\u00a0[\u00a0]: Copied! <pre>out = widgets.Output(layout={'border': '1px solid black'})\nout\n</pre> out = widgets.Output(layout={'border': '1px solid black'}) out In\u00a0[\u00a0]: Copied! <pre>with out:\n    for i in range(10):\n        print(i, 'Hello world!')\n</pre> with out:     for i in range(10):         print(i, 'Hello world!') In\u00a0[\u00a0]: Copied! <pre>from IPython.display import YouTubeVideo\nout.clear_output()\nwith out:\n    display(YouTubeVideo('mA21Us_3m28'))\nout\n</pre> from IPython.display import YouTubeVideo out.clear_output() with out:     display(YouTubeVideo('mA21Us_3m28')) out In\u00a0[\u00a0]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out In\u00a0[\u00a0]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[\u00a0]: Copied! <pre>m = rastvectpy.Map()\nm\n</pre> m = rastvectpy.Map() m In\u00a0[\u00a0]: Copied! <pre>output_widget = widgets.Output(layout={'border': '1px solid black'})\noutput_control = WidgetControl(widget=output_widget, position='bottomright')\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={'border': '1px solid black'}) output_control = WidgetControl(widget=output_widget, position='bottomright') m.add_control(output_control) In\u00a0[\u00a0]: Copied! <pre>with output_widget:\n    print('Nice map!')\n</pre> with output_widget:     print('Nice map!') In\u00a0[\u00a0]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[\u00a0]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get('coordinates')\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get('type') == 'click':\n        with output_widget:\n            output_widget.clear_output()\n            print('You clicked at: {}'.format(latlon))\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get('coordinates')     # latlon = [round(x, 2) for x in latlon]     if kwargs.get('type') == 'click':         with output_widget:             output_widget.clear_output()             print('You clicked at: {}'.format(latlon))  m.on_interaction(handle_interaction)"},{"location":"examples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"examples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"examples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"examples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"examples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"examples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"examples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"examples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"examples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"examples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"examples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"examples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"examples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"examples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"examples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"examples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"examples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"examples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"examples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"examples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"examples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"examples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[3]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"gear\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ntoolbar_button\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"gear\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) toolbar_button <pre>ToggleButton(value=False, icon='gear', layout=Layout(height='28px', padding='0px 0px 0px 4px', width='28px'), \u2026</pre> In\u00a0[\u00a0]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[4]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value Out[4]: <pre>False</pre> In\u00a0[5]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button <pre>ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', padding='0px 0px \u2026</pre> In\u00a0[\u00a0]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) In\u00a0[\u00a0]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box In\u00a0[\u00a0]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Checkbox\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Checkbox\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox In\u00a0[\u00a0]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"Option 1\", \"Option 2\", \"Option 3\"],     value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown In\u00a0[\u00a0]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=100,\n    description=\"Int Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=100,     description=\"Int Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider In\u00a0[\u00a0]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=1,\n    max=100,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\n</pre> float_slider = widgets.FloatSlider(     min=1,     max=100,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) In\u00a0[\u00a0]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"white\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"white\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color In\u00a0[\u00a0]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text In\u00a0[\u00a0]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea In\u00a0[\u00a0]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\" buttons In\u00a0[\u00a0]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding)) with output:     output.clear_output()     print(\"Running ...\") output In\u00a0[\u00a0]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n    output,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons,     output, ] toolbar_widget"},{"location":"examples/package_description/","title":"Package description","text":""},{"location":"examples/package_description/#this-is-a-python-package-for-visualizing-raster-and-vector-data","title":"This is a python package for visualizing raster and vector data\u00b6","text":""},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import rastvectpy\nimport ipyleaflet\nimport ipywidgets as widgets\nfrom ipyleaflet import Map, basemaps, WidgetControl\nfrom ipywidgets import Dropdown, IntSlider, jslink\n</pre> import rastvectpy import ipyleaflet import ipywidgets as widgets from ipyleaflet import Map, basemaps, WidgetControl from ipywidgets import Dropdown, IntSlider, jslink In\u00a0[2]: Copied! <pre>m= rastvectpy.Map(center =[40, -100], zoom = 4)\nurl = 'https://github.com/opengeos/data/blob/main/raster/landsat7.tif?raw=true'\n# url ='https://ims.cr.usgs.gov/browse/naip/fullres/TN/2018/201807_tennessee_naip_0x6000m_utm_cnir/34089/m_3408901_nw_16_060_20181202.jpg'\nm.add_raster(url, name='Landsat7', fit_bounds=True)\n</pre> m= rastvectpy.Map(center =[40, -100], zoom = 4) url = 'https://github.com/opengeos/data/blob/main/raster/landsat7.tif?raw=true' # url ='https://ims.cr.usgs.gov/browse/naip/fullres/TN/2018/201807_tennessee_naip_0x6000m_utm_cnir/34089/m_3408901_nw_16_060_20181202.jpg' m.add_raster(url, name='Landsat7', fit_bounds=True) In\u00a0[\u00a0]: Copied! <pre># m.add_raster(url, name='Landsat7', colormap='viridis', opacity=0.5)\n</pre> # m.add_raster(url, name='Landsat7', colormap='viridis', opacity=0.5) In\u00a0[3]: Copied! <pre>slider = widgets.FloatSlider(description='Opacity:', min=0, max=1, value=0.1)\nwidgets.jslink((slider, 'value'), (m.layers[-1], 'opacity'))\ncontrol = WidgetControl(widget=slider, position='bottomright')\nm.add(control)\nm\n</pre> slider = widgets.FloatSlider(description='Opacity:', min=0, max=1, value=0.1) widgets.jslink((slider, 'value'), (m.layers[-1], 'opacity')) control = WidgetControl(widget=slider, position='bottomright') m.add(control) m  <pre>Map(center=[37.77362148225351, -122.34097463930294], controls=(LayersControl(options=['position'], position='t\u2026</pre>"},{"location":"examples/raster/#visualizing-raster-dataset-from-url","title":"Visualizing raster dataset from URL\u00b6","text":""},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[\u00a0]: Copied! <pre>import geosdemo\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import geosdemo import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[\u00a0]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[\u00a0]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar In\u00a0[\u00a0]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[\u00a0]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar In\u00a0[\u00a0]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[\u00a0]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid In\u00a0[\u00a0]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[\u00a0]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar In\u00a0[\u00a0]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[\u00a0]: Copied! <pre>m = geosdemo.Map()\nm.add_control(toolbar_ctrl)\nm\n</pre> m = geosdemo.Map() m.add_control(toolbar_ctrl) m In\u00a0[\u00a0]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add_control(output_ctrl) In\u00a0[\u00a0]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\") In\u00a0[\u00a0]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) <p></p>"},{"location":"examples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""}]}